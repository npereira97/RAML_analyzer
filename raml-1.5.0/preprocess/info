(((name ZNR-114-VYR-L1R-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ing -> Slice (p ing)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let adder = insert x in map adder c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let uniqueFinder (ing : ingredients list) (ingUnique : ingredients list) =\n     (union ing ingUnique : ingredients list) in\n   fold_cake uniqueFinder [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/ZNR-114-VYR-L1R-hw3.ml))((name OTG-ZXC-MZU-1XO-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (x, y) -> Cake ((map p x), (map p y))\n  | Slice a -> Slice (p a)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let exist s = List.fold_left (fun f -> fun x -> f || (x = s)) false in\n   map (fun l -> if exist x l then l else insert x l) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec f l s =\n     match s with\n     | [] -> l\n     | h::t ->\n         let a = List.for_all (fun x -> x = h) t in\n         if a then f l t else insert h l in\n   fold_cake f [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/OTG-ZXC-MZU-1XO-hw3.ml))((name VO9-SHP-BAH-PDO-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let add l = if contains x l then l else l @ [x] in map add c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let all_ing = fold_cake (@) [] c in\n   let rec get_unique l acc =\n     match l with\n     | [] -> acc\n     | x::xs ->\n         if contains x acc\n         then get_unique xs acc\n         else get_unique xs (x :: acc) in\n   get_unique all_ing [] : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/VO9-SHP-BAH-PDO-hw3.ml))((name VHN-NRO-B9N-NUV-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/VHN-NRO-B9N-NUV-hw3.ml))((name AGO-99O-OOZ-LGH-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let pre_list = fold_cake union [] c in union [] pre_list : ingredients\n                                                                list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/AGO-99O-OOZ-LGH-hw3.ml))((name DJM-Y3H-1WZ-SFB-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i_list -> Slice (p i_list)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/DJM-Y3H-1WZ-SFB-hw3.ml))((name 1W3-PSB-OOX-KFA-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/1W3-PSB-OOX-KFA-hw3.ml))((name DRO-HYT-KTS-PFV-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))\n  | Slice il -> Slice (p il)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map\n     (fun ls -> if List.exists (fun ing -> ing = x) ls then ls else ls @ [x])\n     c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun il -> fun acc -> union il acc) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/DRO-HYT-KTS-PFV-hw3.ml))((name EZT-DHR-MAZ-9N3-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ingredients -> Slice (p ingredients)\n  | Cake (Slice ingredients, rest_of_cake) ->\n      Cake ((Slice (p ingredients)), (map p rest_of_cake))\n  | Cake (s1, s2) -> Cake ((map p s1), (map p s2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let f i_list total_list = union total_list i_list in fold_cake f [] c : \n  ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/EZT-DHR-MAZ-9N3-hw3.ml))((name PPU-KKB-UZB-1X1-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ing -> Slice (p ing)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec exists ings x =\n     match ings with | [] -> false | y::ys -> (y == x) || (exists ys x) in\n   let rec helper l base =\n     match l with\n     | [] -> base\n     | x::xs ->\n         if exists (helper xs base) x\n         then helper xs base\n         else x :: (helper xs base) in\n   fold_cake helper [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/PPU-KKB-UZB-1X1-hw3.ml))((name 1XU-J1W-3GR-1VP-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (union [] (fold_cake union [] c) : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/1XU-J1W-3GR-1VP-hw3.ml))((name MXG-LCH-UKD-VTK-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice list -> Slice (p list)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/MXG-LCH-UKD-VTK-hw3.ml))((name 9CD-BZS-1LA-UKS-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (x, y) -> Cake ((map p x), (map p y))\n  | Slice z -> Slice (p z)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let add l = insert x l in map add c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec removeDups list tally =\n     match list with | [] -> tally | a::b -> removeDups b (insert a tally) in\n   fold_cake removeDups [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/9CD-BZS-1LA-UKS-hw3.ml))((name CSZ-9XX-YV1-OVG-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  raise NotImplemented")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (raise NotImplemented : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/CSZ-9XX-YV1-OVG-hw3.ml))((name 1ZB-GUZ-MYS-UB1-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun y -> insert x y) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun x -> fun y -> union x y) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/1ZB-GUZ-MYS-UB1-hw3.ml))((name XWW-O1J-O3B-DVR-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/XWW-O1J-O3B-DVR-hw3.ml))((name MHT-YVV-XAJ-F1Z-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun y -> if List.mem x y then y else y @ [x]) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake\n     (fun x ->\n        fun y -> let h = List.hd x in if List.mem h y then y else x @ y) [] c : \n  ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/MHT-YVV-XAJ-F1Z-hw3.ml))((name 1Y1-CX4-Z1Z-3SS-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/1Y1-CX4-Z1Z-3SS-hw3.ml))((name WVV-ZZG-GZY-V1O-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))\n  | Slice l -> Slice (List.hd (List.map p [l]))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/WVV-ZZG-GZY-V1O-hw3.ml))((name 1XU-DDZ-PFF-11G-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (cake1, cake2) -> Cake ((map p cake1), (map p cake2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun l -> insert x l) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/1XU-DDZ-PFF-11G-hw3.ml))((name EYZ-ZDM-SOO-3HK-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice a -> Slice (p a)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/EYZ-ZDM-SOO-3HK-hw3.ml))((name F1O-EBO-CZG-VGS-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/F1O-EBO-CZG-VGS-hw3.ml))((name YOS-NNJ-3RO-1N4-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/YOS-NNJ-3RO-1N4-hw3.ml))((name V1C-JO4-WVH-SLY-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map\n     (fun (i : ingredients list) ->\n        if List.exists (fun y -> y == x) i then i else insert x i) c : \n  cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec add_ingred (i : ingredients list) (i_r : ingredients list) =\n     match i with\n     | [] -> i_r\n     | x::s ->\n         if List.mem x i_r\n         then add_ingred s i_r\n         else add_ingred s (insert x i_r) in\n   fold_cake add_ingred [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/V1C-JO4-WVH-SLY-hw3.ml))((name 4DP-O1P-3M4-JNM-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (List.fold_right insert) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/4DP-O1P-3M4-JNM-hw3.ml))((name L31-93O-PLB-3CY-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let add_ingr l = insert x l in map add_ingr c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let union_kill_duplicates l1 l2 = union (union [] l1) l2 in\n   fold_cake union_kill_duplicates [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/L31-93O-PLB-3CY-hw3.ml))((name ZV1-4NU-1ZY-GVO-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice a -> Slice (p a)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let f = insert x in map f c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let f l1 l2 = union l2 l1 in fold_cake f [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/ZV1-4NU-1ZY-GVO-hw3.ml))((name MSO-4CH-SVS-JRJ-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice a -> Slice (p a)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/MSO-4CH-SVS-JRJ-hw3.ml))((name RSJ-M1J-R1Y-DBO-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/RSJ-M1J-R1Y-DBO-hw3.ml))((name WZW-TWG-ZGW-9WO-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (Slice s1, Slice s2) -> Cake ((Slice (p s1)), (Slice (p s2)))\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let p s = (fun slice -> insert x slice) s in map p c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec f x acc = match x with | [] -> acc | x::xs -> insert x (f xs acc) in\n   fold_cake f [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/WZW-TWG-ZGW-9WO-hw3.ml))((name J9U-RNH-1EC-3GR-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (union [] (fold_cake union [] c) : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/J9U-RNH-1EC-3GR-hw3.ml))((name YGO-114-1MM-3ZW-hw3.ml)(function_list((add_ingredient"let add_ingredient x c = map (insert x) c")(get_all_ingredients"let get_all_ingredients =\n  fold_cake\n    (fun sliceIngredients ->\n       fun ingredientsSoFar ->\n         List.fold_left (fun acc -> fun x -> insert x acc) ingredientsSoFar\n           sliceIngredients) []")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/YGO-114-1MM-3ZW-hw3.ml))((name MGX-AR3-KTT-G3W-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  (match c with\n   | Slice s -> Slice (p s)\n   | Cake (Slice s1, Slice s2) -> Cake ((Slice (p s1)), (Slice (p s2)))\n   | Cake (Slice s, c2) -> Cake ((Slice (p s)), (map p c2))\n   | Cake (c2, Slice s) -> Cake ((map p c2), (Slice (p s)))\n   | Cake (c1, c2) -> Cake ((map p c1), (map p c2)) : cake)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec listCheck (l : ingredients list) =\n     (match l with\n      | [] -> true\n      | v::t -> if v = x then false else listCheck t : bool) in\n   let add (l : ingredients list) =\n     (if listCheck l then l @ [x] else l : ingredients list) in\n   map add c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec f newList oldList =\n     let rec listCheck (l : ingredients list) (x : ingredients) =\n       (match l with\n        | [] -> true\n        | v::t -> if v = x then false else listCheck t x : bool) in\n     match newList with\n     | [] -> oldList\n     | x::t ->\n         if (listCheck oldList x) == true\n         then f t ([x] @ oldList)\n         else f t oldList in\n   fold_cake f [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/MGX-AR3-KTT-G3W-hw3.ml))((name YZU-OO4-YO1-OXO-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let p = insert x in map p c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let f l1 l2 = union l2 l1 in fold_cake f [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/YZU-OO4-YO1-OXO-hw3.ml))((name Y1O-ZE4-OSJ-OOO-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/Y1O-ZE4-OSJ-OOO-hw3.ml))((name 41R-TOP-FZG-VDE-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice a -> Slice (p a)\n  | Cake (Slice a, c) -> Cake ((Slice (p a)), (map p c))\n  | Cake (c, Slice a) -> Cake ((map p c), (Slice (p a)))\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun a -> insert x a) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/41R-TOP-FZG-VDE-hw3.ml))((name WXD-ZN3-JG3-N9F-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/WXD-ZN3-JG3-N9F-hw3.ml))((name B4M-GP9-ZV1-FXR-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice a -> Slice (p a)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let p = insert x in map p c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let f = union in fold_cake f [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/B4M-GP9-ZV1-FXR-hw3.ml))((name ZSS-G13-OJ1-XW1-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))\n  | Slice l -> Slice (p l)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/ZSS-G13-OJ1-XW1-hw3.ml))((name ZH9-NHF-NSM-UAE-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let p ingredients = insert x ingredients in map p c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec p l acc =\n     match l with\n     | [] -> acc\n     | x::tail ->\n         (match List.mem x acc with\n          | true -> p tail acc\n          | false -> p tail (x :: acc)) in\n   fold_cake p [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/ZH9-NHF-NSM-UAE-hw3.ml))((name OKJ-NXB-EWP-OSM-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice a -> Slice (p a)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let add i =\n     let not_chocolate b = b != x in\n     if List.for_all not_chocolate i then i @ [x] else i in\n   map add c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let find_all a b = a @ b in fold_cake find_all [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/OKJ-NXB-EWP-OSM-hw3.ml))((name KKH-TOM-AWG-OZ1-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice a -> Slice (p a)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/KKH-TOM-AWG-OZ1-hw3.ml))((name 9OV-CLT-HBH-O1Z-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (match c with\n   | Slice i -> Slice (insert x i)\n   | Cake (c1, c2) -> Cake ((map (insert x) c1), (map (insert x) c2)) : \n  cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (match c with\n   | Slice [] -> []\n   | Slice (i::[]) -> fold_cake union [] (Slice [i])\n   | Slice (h::t) -> fold_cake union [h] (Slice t)\n   | Cake (c1, c2) -> union (fold_cake union [] c1) (fold_cake union [] c2) : \n  ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/9OV-CLT-HBH-O1Z-hw3.ml))((name WGC-TXZ-SBR-NTA-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ingr -> Slice (p ingr)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/WGC-TXZ-SBR-NTA-hw3.ml))((name BFZ-MXR-OOS-OUS-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  (match c with\n   | Slice l -> Slice (p l)\n   | Cake (c1, c2) -> Cake ((map p c1), (map p c2)) : cake)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake get_ingre [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/BFZ-MXR-OOS-OUS-hw3.ml))((name MN1-ZMB-HR9-GOS-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec has_ingredient l =\n     match l with\n     | [] -> false\n     | hd::tl -> if (List.hd l) = x then true else has_ingredient (List.tl l) in\n   map (fun l -> if has_ingredient l then l else l @ [x]) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec has_ingredient l x =\n     match l with\n     | [] -> false\n     | hd::tl ->\n         if (List.hd l) = x then true else has_ingredient (List.tl l) x in\n   let rec get_ingredients l base =\n     match l with\n     | h::t ->\n         if has_ingredient base h\n         then get_ingredients t base\n         else get_ingredients t (base @ [h])\n     | [] -> base in\n   fold_cake get_ingredients [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/MN1-ZMB-HR9-GOS-hw3.ml))((name 1KS-GMM-A3K-RBT-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  raise NotImplemented")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (raise NotImplemented : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/1KS-GMM-A3K-RBT-hw3.ml))((name WGS-CSV-RSO-ETM-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let findIngr s = union s [x] in map findIngr c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/WGS-CSV-RSO-ETM-hw3.ml))((name OLF-SBE-U1O-MKE-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice a -> Slice (p a)\n  | Cake (Slice a, b) -> Cake ((Slice (p a)), (map p b))\n  | Cake (a, Slice b) -> Cake ((map p a), (Slice (p b)))\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/OLF-SBE-U1O-MKE-hw3.ml))((name 3A1-HE4-NHZ-SNA-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice a -> Slice (p a)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun l -> insert x l) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun l -> fun a' -> union a' l) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/3A1-HE4-NHZ-SNA-hw3.ml))((name SBB-ON3-SFZ-UVH-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))\n  | Slice li -> Slice (p li)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (union [] (fold_cake union [] c) : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/SBB-ON3-SFZ-UVH-hw3.ml))((name 3Y1-ZSO-1TB-C1M-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (x, y) -> Cake ((map p x), (map p y))\n  | Slice x -> Slice (p x)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun a -> insert x a) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun x -> fun y -> union x y) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/3Y1-ZSO-1TB-C1M-hw3.ml))((name WOO-XBO-ZUE-9FH-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let add_i l = insert x l in map add_i c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/WOO-XBO-ZUE-9FH-hw3.ml))((name EZW-HB1-KOH-3VE-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let p ingredient list =\n     if List.exists (fun x -> x == ingredient) list\n     then list\n     else list @ [ingredient] in\n   map (p x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec inner_func l1 l2 =\n     match l1 with\n     | [] -> l2\n     | x::xs ->\n         if List.exists (fun y -> y == x) l2\n         then inner_func xs l2\n         else inner_func xs (x :: l2) in\n   fold_cake inner_func [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/EZW-HB1-KOH-3VE-hw3.ml))((name 1OW-Z1U-AUF-ZOZ-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/1OW-Z1U-AUF-ZOZ-hw3.ml))((name GM3-APZ-FEZ-TMK-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))\n  | Slice xs -> Slice (p xs)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let f (l : ingredients list) = (insert x l : ingredients list) in map f c : \n  cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/GM3-APZ-FEZ-TMK-hw3.ml))((name OZ1-SGT-GK4-4N4-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/OZ1-SGT-GK4-4N4-hw3.ml))((name S4B-FBV-XN1-SSY-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/S4B-FBV-XN1-SSY-hw3.ml))((name NZO-ZFB-XJS-A9V-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice lst -> Slice (p lst)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/NZO-ZFB-XJS-A9V-hw3.ml))((name HXR-Y1X-SYV-F3S-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/HXR-Y1X-SYV-F3S-hw3.ml))((name TBY-SL3-PUB-S9A-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ls -> Slice (p ls)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let add ls =\n     match List.find_opt (fun i -> i = x) ls with\n     | None -> insert x ls\n     | _ -> ls in\n   map add c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/TBY-SL3-PUB-S9A-hw3.ml))((name DAD-Y1E-OX1-SC9-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  let makeCake c1 c2 = Cake (c1, c2) in\n  match c with\n  | Cake (x, y) -> makeCake (map p x) (map p y)\n  | Slice s -> Slice (p s)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let insertion (l : ingredients list) = insert x l in map insertion c : \n  cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec clean l r =\n     match l with | [] -> r | x::xs -> clean xs (insert x r) in\n   clean (fold_cake union [] c) [] : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/DAD-Y1E-OX1-SC9-hw3.ml))((name HRV-TZJ-MOP-1WO-hw3.ml)(function_list())(file_path /home/neil/Documents/fall-2020-students-code/hw3/HRV-TZJ-MOP-1WO-hw3.ml))((name 9CN-XJP-TF1-HGA-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/9CN-XJP-TF1-HGA-hw3.ml))((name DHB-RG4-U4N-GFF-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/DHB-RG4-U4N-GFF-hw3.ml))((name 1HS-OR1-ZG4-GHZ-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ingredients -> Slice (p ingredients)\n  | Cake (l, r) -> Cake ((map p l), (map p r))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let f ingredients = union ingredients [x] in map f c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/1HS-OR1-ZG4-GHZ-hw3.ml))((name EVH-VX1-BYZ-WO1-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (Slice l1, Slice l2) -> Cake ((Slice (p l1)), (Slice (p l2)))\n  | Cake (Slice l, Cake (c1, c2)) ->\n      Cake ((Slice (p l)), (map p (Cake (c1, c2))))\n  | Cake (Cake (c1, c2), Slice l) ->\n      Cake ((map p (Cake (c1, c2))), (Slice (p l)))\n  | Cake (Cake (c1, c2), Cake (c3, c4)) ->\n      Cake ((map p (Cake (c1, c2))), (map p (Cake (c3, c4))))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun l -> insert x l) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/EVH-VX1-BYZ-WO1-hw3.ml))((name JOH-BMG-ZMA-KZZ-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice a -> Slice (p a)\n  | Cake (b, c) -> Cake ((map p b), (map p c))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun p -> if mem x p then p else p @ [x]) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec f l l' =\n     match l' with\n     | [] -> l\n     | head::tail -> if mem head tail then f l tail else head :: l in\n   fold_cake f [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/JOH-BMG-ZMA-KZZ-hw3.ml))((name WPB-T1L-ORK-1CR-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec p l =\n     match l with | [] -> x :: l | y::xy -> if x = y then l else y :: (p xy) in\n   map p c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/WPB-T1L-ORK-1CR-hw3.ml))((name 11G-A3O-LM1-SSX-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice list -> Slice (p list)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let p (l : ingredients list) = (insert x l : ingredients list) in map p c : \n  cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let f (slice : ingredients list) (all : ingredients list) =\n     (union all slice : ingredients list) in\n   fold_cake f [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/11G-A3O-LM1-SSX-hw3.ml))((name KJH-DBU-XXA-Z19-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let add li = if not (List.mem x li) then li @ [x] else li in map add c : \n  cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec retrieve i_list acc =\n     match i_list with\n     | [] -> acc\n     | hd::tl ->\n         if List.mem hd acc\n         then retrieve tl acc\n         else (retrieve tl [hd]) @ acc in\n   fold_cake retrieve [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/KJH-DBU-XXA-Z19-hw3.ml))((name 41X-BBO-314-4A1-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (cake1, cake2) -> Cake ((map p cake1), (map p cake2))\n  | Slice ingredients -> Slice (p ingredients)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = map (insert x) c")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (union [] (fold_cake union [] c) : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/41X-BBO-314-4A1-hw3.ml))((name B1Y-OZO-ZVH-GWO-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  raise NotImplemented")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (raise NotImplemented : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/B1Y-OZO-ZVH-GWO-hw3.ml))((name ZOK-RYL-L3K-NNV-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ingr_list -> Slice (p ingr_list)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun ingr_list -> insert x ingr_list) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun x -> fun y -> union y x) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/ZOK-RYL-L3K-NNV-hw3.ml))((name OB1-EW3-AS1-A4A-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/OB1-EW3-AS1-A4A-hw3.ml))((name BSG-OGY-OPU-UJU-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun l -> fun acc -> union acc l) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/BSG-OGY-OPU-UJU-hw3.ml))((name WKG-RCE-11D-UFF-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/WKG-RCE-11D-UFF-hw3.ml))((name 3ZU-OGL-E49-XXX-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice slices -> Slice (p slices)\n  | Cake (cake1, cake2) -> Cake ((map p cake1), (map p cake2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun slices -> fun lst -> union lst slices) [] c : ingredients\n                                                                  list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/3ZU-OGL-E49-XXX-hw3.ml))((name VR1-GK4-THB-O9B-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/VR1-GK4-THB-O9B-hw3.ml))((name SL1-W3Z-MOZ-OBB-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice c1 -> Slice (p c1)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/SL1-W3Z-MOZ-OBB-hw3.ml))((name F11-N1C-UGS-1RD-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun p -> union p [x]) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/F11-N1C-UGS-1RD-hw3.ml))((name ZBZ-ZOB-SGS-LK9-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let p (il : ingredients list) = insert x il in map p c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let base : ingredients list = [] in fold_cake union base c : ingredients\n                                                                  list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/ZBZ-ZOB-SGS-LK9-hw3.ml))((name 3GG-NOU-KTD-BM4-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/3GG-NOU-KTD-BM4-hw3.ml))((name WDB-43B-OKO-OTR-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  raise NotImplemented")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (raise NotImplemented : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/WDB-43B-OKO-OTR-hw3.ml))((name 4N3-VBW-TDA-BZX-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice a -> Slice (p a)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (match c with\n   | Slice a -> Slice (insert x a)\n   | Cake (a, b) -> Cake ((map (insert x) a), (map (insert x) b)) : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (match c with\n   | Slice a -> a\n   | Cake (a, b) -> fold_cake union (fold_cake union [] a) b : ingredients\n                                                                 list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/4N3-VBW-TDA-BZX-hw3.ml))((name DSL-UUF-OB9-CU1-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/DSL-UUF-OB9-CU1-hw3.ml))((name M41-XTN-4OJ-PG1-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (s1, s2) -> Cake ((map p s1), (map p s2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec add inglist =\n     match inglist with\n     | [] -> insert x inglist\n     | i::is -> if i == x then inglist else i :: (add is) in\n   map add c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec get inglist base =\n     match inglist with | [] -> base | x::xs -> get xs (insert x base) in\n   fold_cake get [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/M41-XTN-4OJ-PG1-hw3.ml))((name OOO-J4C-1WP-EDC-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice q -> Slice (p q)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun a -> insert x a) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/OOO-J4C-1WP-EDC-hw3.ml))((name 1WL-BM4-FOB-3YH-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice a -> Slice (p a)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun ingrs -> insert x ingrs) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun i -> fun j -> union i j) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/1WL-BM4-FOB-3YH-hw3.ml))((name FGC-BEZ-UNO-W3T-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice a -> Slice (p a)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun a -> insert x a) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/FGC-BEZ-UNO-W3T-hw3.ml))((name DYD-RBZ-1F1-C4O-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/DYD-RBZ-1F1-C4O-hw3.ml))((name L9F-OJD-JHN-SJS-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun y -> if List.exists (fun t -> t = x) y then y else insert x y) c : \n  cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun (x : 'a) -> fun (base : 'a) -> union x base) [] c : \n  ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/L9F-OJD-JHN-SJS-hw3.ml))((name ORT-M1X-ZNT-ECP-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (a, b) -> Cake ((map p a), (map p b))\n  | Slice a -> Slice (p a)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/ORT-M1X-ZNT-ECP-hw3.ml))((name 9NZ-J9Y-B1F-OAZ-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))\n  | Slice l -> Slice (p l)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun l -> if List.for_all (fun y -> y != x) l then l @ [x] else l) c : \n  cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec no_dup l acc =\n     match l with\n     | [] -> acc\n     | h::t ->\n         if List.for_all (fun x -> x != h) acc\n         then no_dup t (acc @ [h])\n         else no_dup t acc in\n   no_dup (fold_cake union [] c) [] : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/9NZ-J9Y-B1F-OAZ-hw3.ml))((name SRM-3YN-UC4-JUC-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/SRM-3YN-UC4-JUC-hw3.ml))((name 1FE-EVE-SRO-GN4-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice (x::y) -> Slice (p (x :: y))\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))\n  | Slice [] -> Slice []")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (match c with\n   | Slice [] -> Slice [x]\n   | Slice (h::t) -> Slice (insert x (h :: t))\n   | Cake (c1, c2) -> Cake ((map (insert x) c1), (map (insert x) c2)) : \n  cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (match c with\n   | Slice (h::t) -> fold_cake union [] c\n   | Cake (c1, c2) -> fold_cake union (fold_cake union [] c1) c2\n   | Slice [] -> [] : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/1FE-EVE-SRO-GN4-hw3.ml))((name LYG-FDK-FUD-9CO-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with | Slice a -> p a | Cake (a, b) -> (map p a; map p b)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/LYG-FDK-FUD-9CO-hw3.ml))((name SGB-HCO-XPO-HMN-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec check_if (a : ingredients list) =\n     match a with\n     | [] -> false\n     | b::xs ->\n         if b = x then true || (check_if xs) else false || (check_if xs) in\n   map (fun y -> if check_if y then y else y @ [x]) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec check (d : ingredients list) (e : ingredients) =\n     match d with\n     | [] -> false\n     | f::xs -> if f = e then true || (check xs e) else false || (check xs e) in\n   let rec check' (a : ingredients list) (x : ingredients list) =\n     match a with\n     | [] -> x\n     | b::xs -> if check x b then check' xs x else check' xs (b :: x) in\n   fold_cake check' [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/SGB-HCO-XPO-HMN-hw3.ml))((name MTO-RGT-PDY-SVK-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ingredients -> Slice (p ingredients)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/MTO-RGT-PDY-SVK-hw3.ml))((name JVB-BOG-BCC-X39-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))\n  | Slice s -> Slice (p s)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun s -> if List.exists ((==) x) s then s else insert x s) c : \n  cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/JVB-BOG-BCC-X39-hw3.ml))((name GPL-KEM-VZ3-YCH-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  raise NotImplemented")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (raise NotImplemented : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/GPL-KEM-VZ3-YCH-hw3.ml))((name G9B-ASZ-WGX-KOH-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun l -> insert x l) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun l -> fun base -> union l base) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/G9B-ASZ-WGX-KOH-hw3.ml))((name Y1S-LG1-KN1-LOK-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (x, y) -> Cake ((map p x), (map p y))\n  | Slice l -> Slice (p l)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec add l =\n     match l with | [] -> [x] | y::ys -> if y = x then l else y :: (add ys) in\n   map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun l -> fun acc -> union acc l) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/Y1S-LG1-KN1-LOK-hw3.ml))((name 4YB-DRF-WSE-DOS-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (Slice s1, Slice s2) -> Cake ((Slice (p s1)), (Slice (p s2)))\n  | Cake (Slice s, cs) -> Cake ((Slice (p s)), (map p cs))\n  | Cake (cs, Slice s) -> Cake ((map p cs), (Slice (p s)))\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))\n  | Slice s -> Slice (p s)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map\n     (fun (ingr_list : ingredients list) ->\n        match ingr_exists ingr_list x with\n        | true -> ingr_list\n        | false -> ingr_list @ [x]) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake\n     (fun slc ->\n        fun acc ->\n          List.fold_left\n            (fun acc ->\n               fun ingr ->\n                 match ingr_exists acc ingr with\n                 | true -> acc\n                 | false -> acc @ [ingr]) acc slc) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/4YB-DRF-WSE-DOS-hw3.ml))((name BZG-1OL-ZON-OSB-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let insert_ingredient l = let r = x in insert r l in\n   map insert_ingredient c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/BZG-1OL-ZON-OSB-hw3.ml))((name LRY-WPM-SZ1-LOS-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun l -> union l [x]) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/LRY-WPM-SZ1-LOS-hw3.ml))((name BOC-LAL-O9D-J41-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake collectIngredients [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/BOC-LAL-O9D-J41-hw3.ml))((name OJJ-V43-BSG-WUY-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (cake1, cake2) -> Cake ((map p cake1), (map p cake2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun list -> fun base -> union base list) [] c : ingredients\n                                                                list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/OJJ-V43-BSG-WUY-hw3.ml))((name LAF-GW1-4O1-9GH-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun l -> fun b -> union b l) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/LAF-GW1-4O1-9GH-hw3.ml))((name ZLK-DEG-DFZ-BDZ-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let partial = insert x in map partial c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/ZLK-DEG-DFZ-BDZ-hw3.ml))((name 1YK-WSC-1GU-YVX-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (if\n     let ingredient_find find =\n       List.fold_left (fun check -> fun w -> check || (w = find)) false in\n     all (ingredient_find x) c\n   then c\n   else map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/1YK-WSC-1GU-YVX-hw3.ml))((name BOZ-K3O-1U4-KDT-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun l -> if List.mem x l then l else l @ [x]) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/BOZ-K3O-1U4-KDT-hw3.ml))((name C31-ZM1-XLF-KLD-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ingredients -> Slice (p ingredients)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/C31-ZM1-XLF-KLD-hw3.ml))((name G49-ODZ-ABJ-FO4-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec add (s : ingredients list) =\n     (match s with | [] -> [x] | h::t -> if h != x then h :: (add t) else s : \n     ingredients list) in\n   map add c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec test_all (l : ingredients list) (accl : ingredients list) =\n     (let rec inc (x : ingredients) (s : ingredients list) =\n        (match s with\n         | [] -> [x]\n         | h::t -> if h != x then h :: (inc x t) else s : ingredients list) in\n      match l with | [] -> accl | h1::t1 -> test_all t1 (inc h1 accl) : \n     ingredients list) in\n   fold_cake test_all [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/G49-ODZ-ABJ-FO4-hw3.ml))((name SWU-BGR-V9O-1LA-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ingList -> Slice (p ingList)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let p = insert x in map p c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let f l1 l2 = union [] (union l1 l2) in fold_cake f [] c : ingredients\n                                                                list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/SWU-BGR-V9O-1LA-hw3.ml))((name 4YK-EYZ-Z9V-UER-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice [] -> Slice (p [])\n  | Slice a -> Slice (p a)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec f ing =\n     match ing with\n     | [] -> [x]\n     | a::[] -> if a = x then [a] else [a; x]\n     | a::b -> if x = a then ing else a :: (f b) in\n   map f c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec f x y =\n     match x with\n     | [] -> y\n     | a::b ->\n         if List.for_all (fun x -> x != a) y then f b (a :: y) else f b y in\n   fold_cake f [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/4YK-EYZ-Z9V-UER-hw3.ml))((name OBS-4WK-1N1-OHY-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/OBS-4WK-1N1-OHY-hw3.ml))((name 1UO-OKO-Z11-1BO-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec f' gl = match gl with | [] -> false | h::t -> (h = x) || (f' t) in\n   let f gl = match gl with | [] -> [x] | l -> if f' l then l else l @ [x] in\n   map f c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec myExist gl g =\n     match gl with | [] -> false | h::t -> (h = g) || (myExist t g) in\n   let rec f l acc =\n     match l with\n     | [] -> acc\n     | h::t -> if not (myExist acc h) then f t (acc @ [h]) else f t acc in\n   fold_cake f [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/1UO-OKO-Z11-1BO-hw3.ml))((name P4P-WBB-UZZ-J1M-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/P4P-WBB-UZZ-J1M-hw3.ml))((name UZC-DR1-FMN-XCE-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice a -> Slice (p a)\n  | Cake (cake1, cake2) -> Cake ((map p cake1), (map p cake2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec remove input acc =\n     match input with | [] -> acc | a::rest -> remove rest (insert a acc) in\n   map (fun y -> remove (y @ [x]) []) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec remove input acc =\n     match input with | [] -> acc | a::rest -> remove rest (insert a acc) in\n   fold_cake (fun x -> fun y -> remove (x @ y) []) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/UZC-DR1-FMN-XCE-hw3.ml))((name OR1-CGZ-XYL-YYZ-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))\n  | Slice ingredients -> Slice (p ingredients)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec remove_duplicates ingredients acc =\n     match ingredients with\n     | [] -> acc\n     | x::xs -> remove_duplicates xs (insert x acc) in\n   let rm ingredients = remove_duplicates ingredients [] in\n   fold_cake union [] (map rm c) : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/OR1-CGZ-XYL-YYZ-hw3.ml))((name BSF-M1B-GZO-PVS-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun y -> insert x y) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let union2 l2 l1 = union l1 l2 in fold_cake union2 [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/BSF-M1B-GZO-PVS-hw3.ml))((name 9ZN-YOU-FHB-19T-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (s1, s2) -> Cake ((map p s1), (map p s2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/9ZN-YOU-FHB-19T-hw3.ml))((name VUM-LG9-ATF-KWD-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/VUM-LG9-ATF-KWD-hw3.ml))((name TFO-ZVA-F3Z-NOF-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/TFO-ZVA-F3Z-NOF-hw3.ml))((name 1M1-ORB-1CS-LBH-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let p l = insert x l in map p c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/1M1-ORB-1CS-LBH-hw3.ml))((name 1UO-AKO-ZOW-BR1-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let p l = insert x l in map p c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/1UO-AKO-ZOW-BR1-hw3.ml))((name D4X-DKV-WXU-F4S-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun l -> insert x l) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/D4X-DKV-WXU-F4S-hw3.ml))((name NZ4-DZR-TM9-3GO-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice a -> Slice (p a)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec contains_ingredient (i : ingredients) (l : ingredients list) =\n     (match l with\n      | [] -> false\n      | x::[] -> x = i\n      | x::xs -> if x = i then true else contains_ingredient i xs : bool) in\n   let append_ingredient (i : ingredients) (l : ingredients list) =\n     if contains_ingredient i l then l else l @ [i] in\n   map (fun y -> append_ingredient x y) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec contains_ingredient (i : ingredients) (l : ingredients list) =\n     (match l with\n      | [] -> false\n      | x::[] -> x = i\n      | x::xs -> if x = i then true else contains_ingredient i xs : bool) in\n   let append_ingredient (i : ingredients) (l : ingredients list) =\n     if contains_ingredient i l then l else l @ [i] in\n   let rec get_ingredients input_ingredients unique_ingredients =\n     match input_ingredients with\n     | [] -> unique_ingredients\n     | x::xs -> get_ingredients xs (append_ingredient x unique_ingredients) in\n   fold_cake get_ingredients [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/NZ4-DZR-TM9-3GO-hw3.ml))((name YOR-ZZG-EX1-VKE-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/YOR-ZZG-EX1-VKE-hw3.ml))((name 4LW-Z1O-VPE-BJS-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec p ing =\n     match ing with\n     | [] -> [x]\n     | h1::[] -> if h1 = x then [h1] else [h1; x]\n     | h::t -> if h = x then ing else h :: (p t) in\n   map p c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/4LW-Z1O-VPE-BJS-hw3.ml))((name RVB-RBF-DCL-1WO-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice [] -> Slice (p [])\n  | Slice s -> Slice (p s)\n  | Cake (s1, s2) -> Cake ((map p s1), (map p s2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec add_ingredient' c =\n     match c with\n     | Slice s -> map (fun _ -> union s [x]) c\n     | Cake (s1, s2) -> Cake ((add_ingredient' s1), (add_ingredient' s2)) in\n   add_ingredient' c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec get_all_ingredients' c =\n     match c with\n     | Slice s -> fold_cake union [] (Slice s)\n     | Cake (s1, s2) ->\n         union (get_all_ingredients' s1) (get_all_ingredients' s2) in\n   get_all_ingredients' c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/RVB-RBF-DCL-1WO-hw3.ml))((name OJW-UWZ-31G-HGB-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  raise NotImplemented")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (raise NotImplemented : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/OJW-UWZ-31G-HGB-hw3.ml))((name ZGO-4XB-N11-1TP-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (x, y) -> Cake ((map p x), (map p y))\n  | Slice y -> Slice (p y)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/ZGO-4XB-N11-1TP-hw3.ml))((name XOB-XC4-1ON-9H9-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  raise NotImplemented")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (raise NotImplemented : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/XOB-XC4-1ON-9H9-hw3.ml))((name GYR-1XR-X3R-SGL-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ing_l -> Slice (p ing_l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let contains_x x ing_list =\n     List.fold_left (fun a -> fun ing -> (ing = x) || a) false ing_list in\n   map (fun l -> if contains_x x l then l else l @ [x]) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/GYR-1XR-X3R-SGL-hw3.ml))((name 1OR-FNP-ZY9-SHE-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec add_ingredient_list (x : ingredients) (l : ingredients list) =\n     match l with\n     | [] -> [x]\n     | y::ys -> if x = y then l else y :: (add_ingredient_list x ys) in\n   map (add_ingredient_list x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/1OR-FNP-ZY9-SHE-hw3.ml))((name GKE-F9N-OGJ-1ZH-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let addToSlice l = insert x l in map addToSlice c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/GKE-F9N-OGJ-1ZH-hw3.ml))((name T1E-4SC-AJ1-KKZ-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice il -> Slice (p il)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun il -> insert x il) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun il -> fun base -> union il base) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/T1E-4SC-AJ1-KKZ-hw3.ml))((name HOS-KUP-YMD-DXG-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (s1, s2) -> Cake ((map p s1), (map p s2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec helper1 x c =\n     match c with\n     | Slice s ->\n         if List.exists (fun a -> a = x) s\n         then map (fun m -> m) c\n         else map (fun m -> m @ [x]) c\n     | Cake (s1, s2) -> Cake ((helper1 x s1), (helper1 x s2)) in\n   helper1 x c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec helper2 c =\n     match c with\n     | Slice s -> fold_cake union [] c\n     | Cake (s1, s2) -> union (helper2 s1) (helper2 s2) in\n   helper2 c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/HOS-KUP-YMD-DXG-hw3.ml))((name ELG-BZ3-FXJ-PMJ-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice (_ as s) -> Slice (p s)\n  | Cake (s1, s2) -> Cake ((map p s1), (map p s2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec p l = insert x l in\n   match c with\n   | Slice (_ as s) -> Slice (insert x s)\n   | Cake (s1, s2) -> Cake ((map p s1), (map p s2)) : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec f l base =\n     match l with\n     | [] -> base\n     | base::(x::_ as t) -> f t x\n     | x::(_ as t) -> f t x in\n   let rec recur l result =\n     match l with\n     | [] -> result\n     | h::(_ as t) ->\n         let r = fold_cake f h (Slice l) in recur t (r :: result) in\n   match c with\n   | Slice (_ as s) -> recur s []\n   | Cake (s1, s2) ->\n       (match s1 with\n        | Slice (_ as s1_l) ->\n            (match s2 with\n             | Slice (_ as s2_l) -> let s = union s1_l s2_l in recur s [])) : \n  ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/ELG-BZ3-FXJ-PMJ-hw3.ml))((name WS1-KPO-RGC-SZH-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice a -> Slice (p a)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/WS1-KPO-RGC-SZH-hw3.ml))((name GOO-YLV-DBN-ONS-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice a -> Slice (p a)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (if all (List.exists (fun y -> x = y)) c\n   then c\n   else\n     map (fun l -> if List.exists (fun y -> x = y) l then l else l @ [x]) c : \n  cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/GOO-YLV-DBN-ONS-hw3.ml))((name WAW-PEE-FFV-1YL-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice list -> Slice (p list)\n  | Cake (Slice list1, Slice list2) ->\n      Cake ((Slice (p list1)), (Slice (p list2)))\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun list -> fun acc -> union acc list) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/WAW-PEE-FFV-1YL-hw3.ml))((name DDC-BSO-EA4-AJG-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/DDC-BSO-EA4-AJG-hw3.ml))((name SCH-D3B-M1B-4SN-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/SCH-D3B-M1B-4SN-hw3.ml))((name XZT-LRJ-GAW-4BV-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice k -> Slice (p k)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun l -> insert x l) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/XZT-LRJ-GAW-4BV-hw3.ml))((name AU9-HFS-4K1-1SA-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (Slice [], Slice []) -> Cake ((Slice (p [])), (Slice (p [])))\n  | Slice (l : ingredients list) -> Slice (p l)\n  | Cake ((c1 : cake), (c2 : cake)) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun l -> (insert x l : ingredients list)) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake\n     (fun (l1 : ingredients list) ->\n        fun (l2 : ingredients list) -> union l1 l2) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/AU9-HFS-4K1-1SA-hw3.ml))((name BMC-DKK-9OD-BFU-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (s, cake) -> Cake ((map p s), (map p cake))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec add_ing x c =\n     let rec is_exist l i =\n       match l with\n       | [] -> false\n       | x::xs -> if x = i then true else is_exist xs i in\n     match c with\n     | Slice i -> if is_exist i x then c else map (fun i -> i @ [x]) c\n     | Cake (c1, c2) -> Cake ((add_ing x c1), (add_ing x c2)) in\n   add_ing x c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec all_ing in_list base =\n     let rec is_exist l i =\n       match l with\n       | [] -> false\n       | x::xs -> if x = i then true else is_exist xs i in\n     match in_list with\n     | [] -> base\n     | x::xs ->\n         if not (is_exist base x)\n         then all_ing xs (base @ [x])\n         else all_ing xs base in\n   fold_cake all_ing [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/BMC-DKK-9OD-BFU-hw3.ml))((name TX4-11O-UDV-1HZ-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice [] -> Slice []\n  | Slice (hd::tl) -> Slice (p (hd :: tl))\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (match c with\n   | Slice [] -> map (fun x -> x) (Slice (insert x []))\n   | Slice (hd::tl) -> Slice (insert x (hd :: tl))\n   | Cake (c1, c2) ->\n       let rec ai x c =\n         match c with\n         | Slice [] -> Slice (insert x [])\n         | Slice (hd::tl) -> Slice (insert x (hd :: tl))\n         | Cake (c1, c2) -> Cake ((ai x c1), (ai x c2)) in\n       ai x c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (match c with\n   | Slice [] -> []\n   | Slice (hd::tl) as slice -> fold_cake union [] slice\n   | Cake (c1, c2) -> fold_cake union (fold_cake union [] c1) c2 : ingredients\n                                                                    list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/TX4-11O-UDV-1HZ-hw3.ml))((name HTD-GGA-1LY-UWD-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  (match c with\n   | Slice il -> Slice (p il)\n   | Cake (c1, c2) -> Cake ((map p c1), (map p c2)) : cake)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec ingr_adder (il : ingredients list) (base : ingredients list) =\n     match il with | [] -> base | h::t -> ingr_adder t (insert h base) in\n   fold_cake ingr_adder [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/HTD-GGA-1LY-UWD-hw3.ml))((name TS1-VN1-WBD-JZO-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/TS1-VN1-WBD-JZO-hw3.ml))((name N1Z-S1J-N3W-ZV1-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/N1Z-S1J-N3W-ZV1-hw3.ml))((name YSK-O1W-B3A-1Y1-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union2 [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/YSK-O1W-B3A-1Y1-hw3.ml))((name SN1-YZ3-VGO-TUZ-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (Slice i, b) -> Cake ((Slice (p i)), (map p b))\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let add l = insert x l in map add c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/SN1-YZ3-VGO-TUZ-hw3.ml))((name G1G-O1X-1GW-W3L-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (h, t) -> Cake ((map p h), (map p t))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/G1G-O1X-1GW-W3L-hw3.ml))((name G1B-DWB-4YN-OPE-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let insert = insert x in map insert c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let p l = match l with | [] -> [] | h::t -> union t [h] in\n   fold_cake union [] (map p c) : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/G1B-DWB-4YN-OPE-hw3.ml))((name KSY-U4P-PT1-L11-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (raise NotImplemented : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/KSY-U4P-PT1-L11-hw3.ml))((name LXM-JPZ-XGX-ZSS-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (a, b) -> Cake ((map p a), (map p b))\n  | Slice a -> Slice (p a)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let f list acc = match list with | [] -> acc | x -> union acc x in\n   fold_cake f [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/LXM-JPZ-XGX-ZSS-hw3.ml))((name ZMB-1LU-XY1-BO1-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice a -> Slice (p a)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec checkIngredients ingredientsList base =\n     match ingredientsList with\n     | [] -> base\n     | x::t -> checkIngredients t (insert x base) in\n   fold_cake checkIngredients [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/ZMB-1LU-XY1-BO1-hw3.ml))((name POO-OFZ-J1O-S1U-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (raise NotImplemented : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/POO-OFZ-J1O-S1U-hw3.ml))((name ZTT-CHN-GAG-NVH-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice [] -> Slice []\n  | Slice n -> Slice (p n)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let p e =\n     match e with\n     | [] -> insert x e\n     | h::t -> if h == x then h :: t else insert x (h :: t) in\n   match c with\n   | Slice [] -> Slice [x]\n   | Slice e -> Slice (p e)\n   | Cake (c1, c2) -> Cake ((map p c1), (map p c2)) : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let base = [] in\n   match c with\n   | Slice [] -> []\n   | Slice n -> if List.mem n base then base else union n base\n   | Cake (c1, c2) -> fold_cake union (fold_cake union base c1) c2 : \n  ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/ZTT-CHN-GAG-NVH-hw3.ml))((name ZJM-YAY-EAK-ZDD-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice il -> Slice (p il)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/ZJM-YAY-EAK-ZDD-hw3.ml))((name SWN-GAB-BGL-FYU-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (a, b) -> Cake ((map p a), (map p b))\n  | Slice (k::[]) -> Slice (p [k])\n  | Slice (a::b::[]) -> Slice (p [a; b])\n  | Slice (a::b::d::[]) -> Slice (p [a; b; d])\n  | Slice (a::b::d::e::[]) -> Slice (p [a; b; d; e])\n  | Slice (a::b::d::e::f::[]) -> Slice (p [a; b; d; e; f])\n  | Slice (a::b::d::e::f::g::[]) -> Slice (p [a; b; d; e; f; g])")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (match c with\n   | Cake (s1, s2) ->\n       Cake ((map (fun k -> insert x k) s1), (map (fun m -> insert x m) s2))\n   | Slice (a::[]) -> if x = a then Slice [a] else Slice [a; x]\n   | Slice (a::b::[]) ->\n       if (x = a) || (x = b) then Slice [a; b] else Slice [a; b; x]\n   | Slice (a::b::d::[]) ->\n       if (x = a) || ((x = b) || (x = d))\n       then Slice [a; b; d]\n       else Slice [a; b; d; x]\n   | Slice (a::b::d::e::[]) ->\n       if (x = a) || ((x = b) || ((x = d) || (x = e)))\n       then Slice [a; b; d; e]\n       else Slice [a; b; d; e; x]\n   | Slice (a::b::d::e::f::[]) ->\n       if (x = a) || ((x = b) || ((x = d) || ((x = e) || (x = f))))\n       then Slice [a; b; d; e; f]\n       else Slice [a; b; d; e; f; x]\n   | Slice (a::b::d::e::f::g::[]) ->\n       if\n         (x = a) ||\n           ((x = b) || ((x = d) || ((x = e) || ((x = f) || (x = g)))))\n       then Slice [a; b; d; e; f; g]\n       else Slice [a; b; d; e; f; g; x] : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/SWN-GAB-BGL-FYU-hw3.ml))((name ZJV-BSJ-BW3-1FU-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let insert_ingredient (l : ingredients list) = insert x l in\n   map insert_ingredient c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec ingredient_lister (l : ingredients list) (acc : ingredients list)\n     = match l with | [] -> acc | h::t -> ingredient_lister t (insert h acc) in\n   fold_cake ingredient_lister [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/ZJV-BSJ-BW3-1FU-hw3.ml))((name 3LL-9GP-EGY-E4C-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice il -> Slice (p il)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun il -> insert x il) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun il -> fun base -> union il base) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/3LL-9GP-EGY-E4C-hw3.ml))((name ATG-SHC-RF1-ODC-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))\n  | Slice (h::t) -> Slice (p (h :: t))\n  | Slice [] -> Slice []")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let p = insert x in map p c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/ATG-SHC-RF1-ODC-hw3.ml))((name OO4-T4O-GRD-GGR-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice a -> Slice (p a)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/OO4-T4O-GRD-GGR-hw3.ml))((name VB1-SUJ-NPB-M9G-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))\n  | Slice s -> Slice (p s)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun s -> if List.exists ((==) x) s then s else insert x s) c : \n  cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/VB1-SUJ-NPB-M9G-hw3.ml))((name B3O-JWB-ZB3-X4F-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (add x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec f l1 l2 = match l1 with | [] -> l2 | h::t -> f t (add h l2) in\n   fold_cake f [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/B3O-JWB-ZB3-X4F-hw3.ml))((name DU1-9A1-1H1-XWR-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (l, r) -> Cake ((map p l), (map p r))\n  | Slice x -> Slice (p x)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/DU1-9A1-1H1-XWR-hw3.ml))((name ZGP-1DT-K1T-11A-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun l -> union l [x]) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/ZGP-1DT-K1T-11A-hw3.ml))((name SOB-OR3-TN1-OYY-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/SOB-OR3-TN1-OYY-hw3.ml))((name DXZ-1SB-SUK-ZWH-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let union' x y = union y x in map (union' [x]) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/DXZ-1SB-SUK-ZWH-hw3.ml))((name 9DP-RXR-YLY-OVY-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/9DP-RXR-YLY-OVY-hw3.ml))((name BYG-NJJ-TNY-XNG-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (Slice s1, Slice s2) -> Cake ((Slice (p s1)), (Slice (p s2)))\n  | Cake (Cake (c1, c2), Cake (c3, c4)) ->\n      Cake ((Cake ((map p c1), (map p c2))), (Cake ((map p c3), (map p c4))))\n  | Cake (Slice s, Cake (c1, c2)) ->\n      Cake ((Slice (p s)), (Cake ((map p c1), (map p c2))))\n  | Cake (Cake (c1, c2), Slice s) ->\n      Cake ((Cake ((map p c1), (map p c2))), (Slice (p s)))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/BYG-NJJ-TNY-XNG-hw3.ml))((name 3PR-AOG-PXG-BG9-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (y1, y2) -> Cake ((map p y1), (map p y2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (raise NotImplemented : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/3PR-AOG-PXG-BG9-hw3.ml))((name BAB-G4D-1BK-1LW-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice a -> Slice (p a)\n  | Cake (x, xs) -> Cake ((map p x), (map p xs))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (raise NotImplemented : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/BAB-G4D-1BK-1LW-hw3.ml))((name KLR-COT-B1S-O3F-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/KLR-COT-B1S-O3F-hw3.ml))((name UBB-GKP-SFE-CSD-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (x, y) -> Cake ((map p x), (map p y))\n  | Slice z -> Slice (p z)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let add l = insert x l in map add c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec removeDups list tally =\n     match list with | [] -> tally | a::b -> removeDups b (insert a tally) in\n   fold_cake removeDups [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/UBB-GKP-SFE-CSD-hw3.ml))((name XWO-JOZ-DZY-MUK-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ing -> Slice (p ing)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let res = fold_cake union [] c in\n   match res with | [] -> [] | x::[] -> [] | x::t -> union t [x] : ingredients\n                                                                    list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/XWO-JOZ-DZY-MUK-hw3.ml))((name S1O-O3O-KG9-1DP-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/S1O-O3O-KG9-1DP-hw3.ml))((name VPY-YRG-UPP-Z11-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice z -> Slice (p z)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec f l =\n     match l with | [] -> [x] | h::t -> if h = x then h :: t else h :: (f t) in\n   map f c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec single (l : ingredients list) ing =\n     match l with\n     | [] -> []\n     | h::t ->\n         if ing = []\n         then (single t [h]) @ [h]\n         else if [h] = ing then single t ing else h :: (single t ing) in\n   single (fold_cake union [] c) [] : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/VPY-YRG-UPP-Z11-hw3.ml))((name ZN9-3BZ-1TH-ZSE-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let new_list = insert x in map new_list c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/ZN9-3BZ-1TH-ZSE-hw3.ml))((name S4X-1NP-J1A-1UE-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/S4X-1NP-J1A-1UE-hw3.ml))((name SSS-SSE-ZAO-MUA-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (pcs1, pcs2) -> Cake ((map p pcs1), (map p pcs2))\n  | Slice lst -> Slice (p lst)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec addIngredient ingredientsLst =\n     match ingredientsLst with\n     | [] -> ingredientsLst @ [x]\n     | h::t -> if h == x then ingredientsLst else h :: (addIngredient t) in\n   map addIngredient c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec addCake ingredients pasta =\n     match ingredients with\n     | [] -> pasta\n     | h::t -> addCake t (add_ingredient h pasta) in\n   let kek = Cake ((Slice []), (Slice [])) in\n   let fold = fold_cake addCake kek c in\n   match fold with\n   | Cake (Slice lst, _)|Slice lst|Cake (_, Slice lst) -> lst\n   | _ -> [] : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/SSS-SSE-ZAO-MUA-hw3.ml))((name 1ZS-3OG-BVD-Z1S-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (a, b) -> Cake ((map p a), (map p b))\n  | Slice s -> Slice (p s)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let get_ing slice acc =\n     match slice with | [] -> acc | a::b -> union slice acc in\n   fold_cake get_ing [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/1ZS-3OG-BVD-Z1S-hw3.ml))((name 4GT-P1O-4OH-3XB-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec get_first (c : cake) =\n     match c with | Slice s -> s | Cake (c1, c2) -> get_first c1 in\n   fold_cake union (get_first c) c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/4GT-P1O-4OH-3XB-hw3.ml))((name 1AN-PTS-KWJ-GYE-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec add_ingredient' x c =\n     match c with\n     | Slice _ ->\n         if all (List.fold_left (fun y -> fun z -> y || (z = x)) false) c\n         then c\n         else map (fun i -> i @ [x]) c\n     | Cake (s1, s2) -> Cake ((add_ingredient' x s1), (add_ingredient' x s2)) in\n   add_ingredient' x c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (List.fold_right insert) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/1AN-PTS-KWJ-GYE-hw3.ml))((name MOC-AVV-SU1-J4M-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/MOC-AVV-SU1-J4M-hw3.ml))((name 1FM-AO9-WOO-4NR-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (s1, s2) -> Cake ((map p s1), (map p s2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/1FM-AO9-WOO-4NR-hw3.ml))((name L91-FGA-TTX-11A-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p (s : ingredients list))\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let add_to_slice (ingrets : ingredients list) =\n     (if (List.mem x ingrets) = false then ingrets @ [x] else ingrets : \n     ingredients list) in\n   map add_to_slice c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec find e = function | [] -> false | h::t -> (h = e) || (find e t) in\n   let rec help_append_list l1 l2 =\n     match l1 with\n     | [] -> l2\n     | h::t ->\n         if find h l2\n         then help_append_list t l2\n         else help_append_list t (h :: l2) in\n   let append_list x y = help_append_list x (help_append_list y []) in\n   fold_cake append_list ([] : ingredients list) c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/L91-FGA-TTX-11A-hw3.ml))((name OS1-1X9-HKE-WOC-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  raise NotImplemented")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (raise NotImplemented : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/OS1-1X9-HKE-WOC-hw3.ml))((name BFH-3XX-O1L-1CP-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice list -> Slice (p list)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (union [] (fold_cake union [] c) : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/BFH-3XX-O1L-1CP-hw3.ml))((name TEW-ZMV-4SS-OG9-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (s1, s2) -> Cake ((map p s1), (map p s2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let has_ingr x =\n     List.fold_left\n       (fun b ->\n          fun ingr_elem ->\n            match b with | false -> ingr_elem == x | true -> true) false in\n   map (fun s -> if has_ingr x s then s else s @ [x]) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/TEW-ZMV-4SS-OG9-hw3.ml))((name 1XM-LFB-OK4-34M-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice a -> Slice (p a)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun a -> insert x a) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/1XM-LFB-OK4-34M-hw3.ml))((name 11G-OAS-OBS-VRG-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (x, y) -> Cake ((map p x), (map p y))\n  | Slice (x::[]) -> Slice (p [x])\n  | Slice (x::y::[]) -> Slice (p [x; y])\n  | Slice (x::y::z::[]) -> Slice (p [x; y; z])\n  | Slice (x::y::z::k::[]) -> Slice (p [x; y; z; k])\n  | Slice (x::y::z::k::r::[]) -> Slice (p [x; y; z; k; r])\n  | Slice (x::y::z::k::r::s::[]) -> Slice (p [x; y; z; k; r; s])")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (match c with\n   | Cake (c1, c2) ->\n       Cake ((map (fun a -> insert x a) c1), (map (fun b -> insert x b) c2))\n   | Slice (i::[]) -> if x = i then Slice [i] else Slice [i; x]\n   | Slice (i::y::[]) ->\n       if (x = i) || (y = x) then Slice [i; y] else Slice [i; y; x]\n   | Slice (i::y::z::[]) ->\n       if (x = i) || ((y = x) || (x = z))\n       then Slice [i; y; z]\n       else Slice [i; y; z; x]\n   | Slice (i::y::z::k::[]) ->\n       if (x = i) || ((y = x) || ((x = z) || (x = k)))\n       then Slice [i; y; z; k]\n       else Slice [i; y; z; k; x]\n   | Slice (i::y::z::k::l::[]) ->\n       if (x = i) || ((y = x) || ((x = z) || ((x = k) || (x = l))))\n       then Slice [i; y; z; k; l]\n       else Slice [i; y; z; k; l; x]\n   | Slice (i::y::z::k::l::m::[]) ->\n       if\n         (x = i) ||\n           ((y = x) || ((x = z) || ((x = k) || ((x = l) || (x = m)))))\n       then Slice [i; y; z; k; l; m]\n       else Slice [i; y; z; k; l; m; x] : cake)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/11G-OAS-OBS-VRG-hw3.ml))((name G1N-SGG-UBL-ML1-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let insert2 = insert x in map insert2 c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let buffer = fold_cake union [] c in union [] buffer : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/G1N-SGG-UBL-ML1-hw3.ml))((name BL1-ZBY-UWZ-TKC-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/BL1-ZBY-UWZ-TKC-hw3.ml))((name GOO-1BA-3KG-1VP-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))\n  | Slice a -> Slice (p a)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let add = insert x in map add c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/GOO-1BA-3KG-1VP-hw3.ml))((name 1OC-PUS-AFJ-1BN-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  raise NotImplemented")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (raise NotImplemented : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/1OC-PUS-AFJ-1BN-hw3.ml))((name WCB-XRL-LY1-UXW-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec helper l1 l2 =\n     match l1 with | [] -> [] | h::t -> insert h (helper t l2) in\n   helper (fold_cake union [] c) [] : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/WCB-XRL-LY1-UXW-hw3.ml))((name YO1-DGS-N3X-TJB-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (f, s) -> Cake ((map p f), (map p s))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/YO1-DGS-N3X-TJB-hw3.ml))((name NOG-UBF-UTU-3WV-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/NOG-UBF-UTU-3WV-hw3.ml))((name ZCY-S9P-1PZ-RBO-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (l, r) -> Cake ((map p l), (map p r))\n  | Slice ss -> Slice (p ss)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun iList -> if isIn x iList then iList else iList @ [x]) c : \n  cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake checkDupes [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/ZCY-S9P-1PZ-RBO-hw3.ml))((name VOB-13B-KOK-J1J-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  (match c with\n   | Slice s -> Slice (p s)\n   | Cake (a, b) -> Cake ((map p a), (map p b)) : cake)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (match c with\n   | Slice s -> s\n   | Cake (a, b) -> fold_cake union [] (Cake (a, b)) : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/VOB-13B-KOK-J1J-hw3.ml))((name SKW-SU3-WT4-O1Z-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/SKW-SU3-WT4-O1Z-hw3.ml))((name 41O-CME-MA1-SZC-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))\n  | Slice lst -> Slice (p lst)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun lst -> insert x lst) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun lst -> fun a -> union lst a) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/41O-CME-MA1-SZC-hw3.ml))((name Z4H-9HT-UCM-LE3-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/Z4H-9HT-UCM-LE3-hw3.ml))((name T1P-SZ1-SA1-1PY-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  (match c with\n   | Slice s -> Slice (p s)\n   | Cake (c1, c2) -> Cake ((map p c1), (map p c2)) : cake)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let exists a = List.fold_left (fun z -> fun y -> z || (y = a)) false in\n   map (fun l -> let i = l in if exists x i then i else insert x i) c : \n  cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/T1P-SZ1-SA1-1PY-hw3.ml))((name AC1-SFB-DCS-AOM-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ings -> Slice (p ings)\n  | Cake (cl, cr) -> Cake ((map p cl), (map p cr))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map\n     (fun ings ->\n        if\n          List.fold_left\n            (fun acc -> fun e -> if acc == false then e == x else true) false\n            ings\n        then ings\n        else insert x ings) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/AC1-SFB-DCS-AOM-hw3.ml))((name XLL-OOL-OJV-TRP-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice a -> Slice (p a)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec help_out c =\n     let rec help l x =\n       match l with\n       | h::[] -> h = x\n       | s::t -> if s = x then true else help t x in\n     match c with\n     | Slice [] -> Slice [x]\n     | Slice a -> if help a x then c else map (fun a -> a @ [x]) c\n     | Cake (c1, c2) -> Cake ((help_out c1), (help_out c2)) in\n   help_out c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec helper c =\n     match c with\n     | Slice s -> fold_cake union [] (Slice s)\n     | Cake (c1, c2) -> union (helper c1) (helper c2) in\n   helper c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/XLL-OOL-OJV-TRP-hw3.ml))((name 99Y-PK1-OAO-ZVS-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ingL -> Slice (p ingL)\n  | Cake (Slice ingL, restCake) -> Cake ((Slice (p ingL)), (map p restCake))\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let swap f l2 l1 = f l1 l2 in\n   let union' = swap union in fold_cake union' [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/99Y-PK1-OAO-ZVS-hw3.ml))((name GWT-J1T-S4B-KBG-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/GWT-J1T-S4B-KBG-hw3.ml))((name OZV-4VO-YOS-K4V-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice a -> Slice (p a)\n  | Cake (b, e) -> Cake ((map p b), (map p e))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun m -> insert x m) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (union [] (fold_cake union [] c) : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/OZV-4VO-YOS-K4V-hw3.ml))((name 14S-SWG-4G1-XPC-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/14S-SWG-4G1-XPC-hw3.ml))((name R1A-G14-OBB-GSS-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/R1A-G14-OBB-GSS-hw3.ml))((name Z1X-RPR-RXB-SFG-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/Z1X-RPR-RXB-SFG-hw3.ml))((name Y11-BW9-P4D-PGE-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/Y11-BW9-P4D-PGE-hw3.ml))((name LVM-OSP-DAG-3AB-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice list -> Slice (p list)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/LVM-OSP-DAG-3AB-hw3.ml))((name AV3-FN4-1WG-ZTW-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let curry_union l2 l1 = union l1 l2 in fold_cake curry_union [] c : \n  ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/AV3-FN4-1WG-ZTW-hw3.ml))((name H1T-BDH-JZH-GF1-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ingr -> Slice (p ingr)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/H1T-BDH-JZH-GF1-hw3.ml))((name J1S-DS1-1RS-YLW-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let n = insert x in map n c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let f x y = union y x in fold_cake f [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/J1S-DS1-1RS-YLW-hw3.ml))((name HTG-GBB-JPC-BOM-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (s1, s2) -> Cake ((map p s1), (map p s2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec p ingreList =\n     match ingreList with\n     | [] -> [x]\n     | y::ys -> if y != x then y :: (p ys) else ingreList in\n   map p c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec contains s base =\n     match base with | [] -> false | y::ys -> (s = y) || (contains s ys) in\n   let rec f s base =\n     match s with\n     | [] -> base\n     | x::xs ->\n         if (contains x base) || (contains x xs)\n         then f xs base\n         else (f xs base) @ [x] in\n   fold_cake f [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/HTG-GBB-JPC-BOM-hw3.ml))((name TBH-DMR-VP1-A1N-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/TBH-DMR-VP1-A1N-hw3.ml))((name L9D-O4E-SRX-1ZB-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map\n     (fun l ->\n        if all (List.fold_left (fun a -> fun b -> a || (b = x)) false) c\n        then l\n        else insert x l) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun l1 -> fun l2 -> union l1 l2) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/L9D-O4E-SRX-1ZB-hw3.ml))((name 3ZJ-YHL-ZSS-4MB-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun l -> insert x l) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec makeUnique l i first =\n     match l with\n     | [] -> []\n     | h::t ->\n         if (h = i) || (h = first)\n         then makeUnique t (List.hd l) first\n         else h :: (makeUnique t (List.hd l) first) in\n   let list = fold_cake (fun l1 -> fun l2 -> union l1 l2) [] c in\n   (List.hd list) :: (makeUnique list (List.hd list) (List.hd list)) : \n  ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/3ZJ-YHL-ZSS-4MB-hw3.ml))((name WDA-NOJ-991-DKN-hw3.ml)(function_list((map"let rec map p c =\n  match c with\n  | Slice ings -> Slice (p ings)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient x = map (insert x)")(get_all_ingredients"let get_all_ingredients = fold_cake union []")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/WDA-NOJ-991-DKN-hw3.ml))((name 1TA-4SM-RXJ-9R3-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (Slice a, Slice b) -> Cake ((map p (Slice a)), (map p (Slice b)))\n  | Cake (Cake (c1, c2), Cake (c3, c4)) ->\n      Cake ((Cake ((map p c1), (map p c2))), (Cake ((map p c3), (map p c4))))\n  | Cake (Cake (c1, c2), Slice s) ->\n      Cake ((Cake ((map p c1), (map p c2))), (Slice (p s)))\n  | Cake (Slice s, Cake (c1, c2)) ->\n      Cake ((Slice (p s)), (Cake ((map p c1), (map p c2))))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun y -> insert x y) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun l1 -> fun l2 -> union l1 l2) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/1TA-4SM-RXJ-9R3-hw3.ml))((name RTO-L1B-OCX-4UA-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))\n  | Slice l -> Slice (p l)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun l -> if List.mem x l then l else insert x l) c : cake)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/RTO-L1B-OCX-4UA-hw3.ml))((name 9JU-LOB-11E-EBG-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun i -> fun l -> union l i) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/9JU-LOB-11E-EBG-hw3.ml))((name FCH-YZL-C91-TJZ-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec check i =\n     match i with | [] -> false | h::t -> (h == x) || (check t) in\n   map (fun i -> if check i then i else i @ [x]) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/FCH-YZL-C91-TJZ-hw3.ml))((name ADZ-YD1-V9Z-AGO-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice lst -> Slice (p lst)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun lst -> if List.mem x lst then lst else lst @ [x]) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let f lst base =\n     List.fold_left\n       (fun results ->\n          fun x -> if List.mem x results then results else x :: results) base\n       lst in\n   fold_cake f [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/ADZ-YD1-V9Z-AGO-hw3.ml))((name DN4-MUF-1DC-OZY-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (Slice x, Slice y) -> Cake ((Slice (p x)), (Slice (p y)))\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec check_duplicate l =\n     match l with\n     | [] -> false\n     | h::t -> if h != x then check_duplicate t else true in\n   let add l =\n     match l with\n     | [] -> [x]\n     | l2 -> if not (check_duplicate l) then l2 @ [x] else l2 in\n   map add c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec dup l acc =\n     match l with | [] -> acc | h::t -> dup t (insert h acc) in\n   dup (fold_cake union [] c) [] : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/DN4-MUF-1DC-OZY-hw3.ml))((name BGT-B1J-DOG-DFO-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ingredients_list -> Slice (p ingredients_list)\n  | Cake (Slice ingredients_list, cake) ->\n      Cake ((Slice (p ingredients_list)), (map p cake))\n  | Cake (cake1, cake2) -> Cake ((map p cake1), (map p cake2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun ingredients_list -> union ingredients_list [x]) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake\n     (fun ingredients_list -> fun base -> union base ingredients_list) [] c : \n  ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/BGT-B1J-DOG-DFO-hw3.ml))((name AG1-SPJ-RLM-T1L-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ingred -> Slice (p ingred)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let add_slice = insert x in map add_slice c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec get_ingredient ingred_to_search ingred_found =\n     let ing =\n       List.find_opt (fun x -> not (List.mem x ingred_found))\n         ingred_to_search in\n     match ing with\n     | Some ingredient ->\n         get_ingredient ingred_to_search (ingredient :: ingred_found)\n     | None -> ingred_found in\n   fold_cake get_ingredient [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/AG1-SPJ-RLM-T1L-hw3.ml))((name ON1-FMN-ELO-XZK-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let p = insert x in map p c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let insertEn l base = union base l in fold_cake insertEn [] c : ingredients\n                                                                    list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/ON1-FMN-ELO-XZK-hw3.ml))((name OPO-9OZ-ZXG-1YB-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec add_ingredient_2 acc l =\n     match l with\n     | [] -> acc\n     | head::tail ->\n         if head = x\n         then add_ingredient_2 true tail\n         else add_ingredient_2 acc tail in\n   let add_ingredient' l = if add_ingredient_2 false l then l else l @ [x] in\n   map add_ingredient' c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec ifExist acc l x =\n     match l with\n     | [] -> acc\n     | head::tail ->\n         if head = x then ifExist true tail x else ifExist acc tail x in\n   let rec get_all_ingredients' list1 list2 =\n     match list1 with\n     | [] -> list2\n     | head::tail ->\n         if ifExist false list2 head\n         then get_all_ingredients' tail list2\n         else get_all_ingredients' tail (head :: list2) in\n   fold_cake get_all_ingredients' [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/OPO-9OZ-ZXG-1YB-hw3.ml))((name LY1-WGO-NKB-GP1-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let selective_add (l : ingredients list) = (insert x l : ingredients list) in\n   map selective_add c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake all_ingr_helper [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/LY1-WGO-NKB-GP1-hw3.ml))((name 4OP-JZK-PLZ-DPS-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (s, t) -> Cake ((map p s), (map p t))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec add_this s =\n     match s with\n     | [] -> [x]\n     | i::l -> if i = x then s else i :: (add_this l) in\n   map add_this c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec get_ingredients s acc =\n     match s with\n     | [] -> acc\n     | x::ls ->\n         if List.exists (fun a -> a = x) acc\n         then get_ingredients ls acc\n         else get_ingredients ls (x :: acc) in\n   fold_cake get_ingredients [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/4OP-JZK-PLZ-DPS-hw3.ml))((name SZ9-FXU-FG4-GCW-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice [] -> Slice (p [])\n  | Slice (a::b) -> Slice (p (a :: b))\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec ing_adder lst =\n     (match lst with\n      | [] -> [x]\n      | a::[] -> if a == x then [a] else [a; x]\n      | a::b -> if a == x then a :: b else a :: (ing_adder b) : ingredients\n                                                                  list) in\n   map ing_adder c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/SZ9-FXU-FG4-GCW-hw3.ml))((name U9O-3OY-O4P-ODG-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ingre_list -> Slice (p ingre_list)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun ingre_list -> insert x ingre_list) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun ingre_list -> fun acc -> union acc ingre_list) [] c : \n  ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/U9O-3OY-O4P-ODG-hw3.ml))((name 4GH-O9J-ZKT-JDM-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (Slice h, t) -> Cake ((map p (Slice h)), (map p t))\n  | Cake (c, g) -> Cake ((map p c), (map p g))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/4GH-O9J-ZKT-JDM-hw3.ml))((name OZO-O1A-TJS-GRS-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (Slice x, s2) -> Cake ((Slice (p x)), (map p s2))\n  | Cake (y, z) -> Cake ((map p y), (map p z))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun a -> union a [x]) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/OZO-O1A-TJS-GRS-hw3.ml))((name 1US-JH1-G9O-PUZ-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ing_list -> Slice (p ing_list)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec p ing_list =\n     match ing_list with\n     | h::t -> if h == x then ing_list else h :: (p t)\n     | [] -> [x] in\n   map p c : cake)")(map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ing_list -> Slice (p ing_list)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec p ing_list =\n     match ing_list with\n     | h::t -> if h == x then ing_list else h :: (p t)\n     | [] -> [x] in\n   map p c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/1US-JH1-G9O-PUZ-hw3.ml))((name LTW-F1J-LGO-C1S-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ingredients -> Slice (p ingredients)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let result = fold_cake union [] c in union [] result : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/LTW-F1J-LGO-C1S-hw3.ml))((name MM4-JVY-H9O-FGS-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (cake1, cake2) -> Cake ((map p cake1), (map p cake2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let p ingr_list =\n     match (insert x ingr_list) = ingr_list with\n     | true -> ingr_list\n     | false -> ingr_list @ [x] in\n   map p c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/MM4-JVY-H9O-FGS-hw3.ml))((name GBC-GSM-SCZ-BSX-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ing_list -> Slice (p ing_list)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/GBC-GSM-SCZ-BSX-hw3.ml))((name JOB-VVX-ZGZ-OSW-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (slice1, slice2) -> Cake ((map p slice1), (map p slice2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec contains (elem : 'a) (list : 'a list) =\n     (match list with\n      | [] -> false\n      | h::t -> if h = elem then true else contains elem t : bool) in\n   if all (fun i -> contains x i) c then c else map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/JOB-VVX-ZGZ-OSW-hw3.ml))((name 4LM-1BZ-Z9G-J4O-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/4LM-1BZ-Z9G-J4O-hw3.ml))((name VE1-TJS-ODO-1LO-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec countIngredients ingredients count =\n     match ingredients with\n     | [] -> count\n     | x::xs -> countIngredients xs (union count [x]) in\n   fold_cake countIngredients [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/VE1-TJS-ODO-1LO-hw3.ml))((name W1U-OMP-Z1S-NO1-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice (_ as lst) -> Slice (p lst)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let exists k = List.fold_left (fun b -> fun x -> b || (x = k)) false in\n   map (fun lst -> if not (exists x lst) then insert x lst else lst) c : \n  cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let exists k = List.fold_left (fun b -> fun x -> b || (x = k)) false in\n   let rec f lst base =\n     match lst with\n     | [] -> base\n     | x::xs -> if not (exists x base) then f xs (x :: base) else f xs base in\n   fold_cake f [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/W1U-OMP-Z1S-NO1-hw3.ml))((name OJR-GGF-EHO-G33-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (i, n) -> Cake ((map p i), (map p n))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (union [] (fold_cake union [] c) : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/OJR-GGF-EHO-G33-hw3.ml))((name DSS-CXW-GNO-91B-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice a -> Slice (p a)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec hasIng l a =\n     match l with | [] -> false | h::t -> if h == a then true else hasIng t a in\n   map (fun l -> if hasIng l x then l else l @ [x]) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun l -> fun base -> base @ l) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/DSS-CXW-GNO-91B-hw3.ml))((name DOO-YCH-GKX-GV1-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec f (i : ingredients list) (b : ingredients list) =\n     (match i with\n      | [] -> b\n      | head::[] -> insert head b\n      | head::tail -> f tail (insert head b) : ingredients list) in\n   fold_cake f [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/DOO-YCH-GKX-GV1-hw3.ml))((name F9H-WAT-N3N-PGZ-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice a -> Slice (p a)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/F9H-WAT-N3N-PGZ-hw3.ml))((name LBB-GSH-EOG-OGX-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  (match c with\n   | Cake (x, xs) ->\n       (match (x, xs) with\n        | (Slice i, m) -> Cake ((Slice (p i)), (map p m))\n        | (m, Slice i) -> Cake ((map p m), (Slice (p i)))\n        | (m, n) -> Cake ((map p m), (map p n)))\n   | Slice i -> Slice (p i) : cake)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec all2 (i : ingredients list) =\n     (match i with | a::b -> (a = x) || (all2 b) | _ -> false : bool) in\n   let add (i : ingredients list) = if not (all2 i) then i @ [x] else i in\n   map add c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec all2 (i : ingredients list) (x : ingredients) =\n     (match i with | a::b -> (a = x) || (all2 b x) | _ -> false : bool) in\n   let rec comb (i : ingredients list) (base : ingredients list) =\n     match i with\n     | a::b -> if all2 base a then comb b base else comb b (a :: base)\n     | [] -> base in\n   fold_cake comb [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/LBB-GSH-EOG-OGX-hw3.ml))((name RR1-ECT-KRT-EPB-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (c_1, c_2) -> Cake ((map p c_1), (map p c_2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun i -> if List.mem x i then i else i @ [x]) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun l -> fun base -> union base l) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/RR1-ECT-KRT-EPB-hw3.ml))((name OUS-PWN-RO4-HWZ-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun s -> if checkIng s x then s else s @ [x]) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake\n     (fun res ->\n        fun addo ->\n          res @ (List.filter (fun t -> (checkIng res t) == false) addo)) [] c : \n  ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/OUS-PWN-RO4-HWZ-hw3.ml))((name KZN-1X3-TKJ-X1B-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice sl -> Slice (p sl)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/KZN-1X3-TKJ-X1B-hw3.ml))((name WXA-1T9-EJV-LJB-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ingredients -> Slice (p ingredients)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/WXA-1T9-EJV-LJB-hw3.ml))((name PAW-TKC-1X1-M1A-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun ilst -> fun i -> union i ilst) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/PAW-TKC-1X1-M1A-hw3.ml))((name BGS-RY3-ZJE-ZGB-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (a, b) -> Cake ((map p a), (map p b))\n  | Slice l -> Slice (p l)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/BGS-RY3-ZJE-ZGB-hw3.ml))((name OBS-TNX-XPO-S13-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (l, r) -> Cake ((map p l), (map p r))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/OBS-TNX-XPO-S13-hw3.ml))((name X3N-4ET-B11-OM1-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice e -> Slice (p e)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let helper = insert x in map helper c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/X3N-4ET-B11-OM1-hw3.ml))((name GOG-BWU-UOG-AFS-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s1 -> Slice (p s1)\n  | Cake (s1, s2) -> Cake ((map p s1), (map p s2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (raise NotImplemented : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/GOG-BWU-UOG-AFS-hw3.ml))((name BLZ-TDD-FZZ-1ZH-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let contains ingred y = not (List.for_all (fun z -> z != ingred) y) in\n   let curried = contains x in\n   map (fun y -> if curried y then y else y @ [x]) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/BLZ-TDD-FZZ-1ZH-hw3.ml))((name TGH-SOR-B1Y-HXA-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let is_ingredient (list : ingredients list) (a : ingredients) =\n     (List.exists (fun k -> k == a) list : bool) in\n   map (fun l -> if is_ingredient l x then l else l @ [x]) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (List.fold_right insert) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/TGH-SOR-B1Y-HXA-hw3.ml))((name ZCJ-GBC-WNV-GCL-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))\n  | Slice s -> Slice (p s)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map\n     (fun l ->\n        if List.fold_left (fun a -> fun b -> a || (b == x)) false l\n        then l\n        else insert x l) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/ZCJ-GBC-WNV-GCL-hw3.ml))((name 931-XB1-1BV-W1E-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let p l = if List.exists (fun a -> a = x) l then l else insert x l in\n   map p c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun l -> fun b -> union l b) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/931-XB1-1BV-W1E-hw3.ml))((name BZG-1YJ-CZD-YR9-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (s1, s2) -> Cake ((map p s1), (map p s2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec add_ingredient_2 x l =\n     match l with\n     | [] -> [x]\n     | tl::[] -> if tl = x then [tl] else [tl; x]\n     | hd::tl -> if hd = x then hd :: tl else hd :: (add_ingredient_2 x tl) in\n   map (add_ingredient_2 x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec add_ingredient_2 x l =\n     match l with\n     | [] -> [x]\n     | tl::[] -> if tl = x then [tl] else [tl; x]\n     | hd::tl -> if hd = x then hd :: tl else hd :: (add_ingredient_2 x tl) in\n   let rec get_ingredients l acc =\n     match l with\n     | [] -> acc\n     | hd::tl -> get_ingredients tl (add_ingredient_2 hd acc) in\n   fold_cake get_ingredients [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/BZG-1YJ-CZD-YR9-hw3.ml))((name K9B-ODH-Z11-SRN-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice a -> Slice (p a)\n  | Cake (b, c) -> Cake ((map p b), (map p c))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun p -> if List.mem x p then p else p @ [x]) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec f l l' =\n     match l' with | [] -> l | h::t -> if List.mem h t then f l t else h :: l in\n   fold_cake f [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/K9B-ODH-Z11-SRN-hw3.ml))((name 4SS-KLF-13J-1JO-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/4SS-KLF-13J-1JO-hw3.ml))((name OMG-NK3-331-BB3-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))\n  | Slice ingredList -> Slice (p ingredList)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec add_to_list l base =\n     match l with | [] -> base | x::xs -> add_to_list xs (insert x base) in\n   fold_cake add_to_list [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/OMG-NK3-331-BB3-hw3.ml))((name MLL-ZSR-EVR-Y9T-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec has_ingredient l =\n     match l with\n     | [] -> false\n     | hd::tl -> if (List.hd l) = x then true else has_ingredient (List.tl l) in\n   map (fun l -> if has_ingredient l then l else l @ [x]) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec has_ingredient l x =\n     match l with\n     | [] -> false\n     | hd::tl ->\n         if (List.hd l) = x then true else has_ingredient (List.tl l) x in\n   let rec get_ingredients l base =\n     match l with\n     | h::t ->\n         if has_ingredient base h\n         then get_ingredients t base\n         else get_ingredients t (base @ [h])\n     | [] -> base in\n   fold_cake get_ingredients [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/MLL-ZSR-EVR-Y9T-hw3.ml))((name BTO-KGH-CF1-3Y1-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  raise NotImplemented")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (raise NotImplemented : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/BTO-KGH-CF1-3Y1-hw3.ml))((name 1NC-NOV-OHD-VOP-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (l, g) -> Cake ((map p l), (map p g))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec add list =\n     match list with\n     | h::[] -> if h == x then [h] else [h; x]\n     | h::t -> if h == x then list else h :: (add t)\n     | [] -> [x] in\n   map add c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec final_func listING based =\n     match listING with | [] -> based | h::t -> final_func t (insert h based) in\n   fold_cake final_func [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/1NC-NOV-OHD-VOP-hw3.ml))((name WJZ-33P-LDT-1TS-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  let rec applyFxn c' =\n    match c' with\n    | Slice slice -> Slice (p slice)\n    | Cake (a, b) -> Cake ((applyFxn a), (applyFxn b)) in\n  applyFxn c")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun ingr_list -> insert x ingr_list) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (union [] (fold_cake union [] c) : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/WJZ-33P-LDT-1TS-hw3.ml))((name SNL-STL-3KO-SOB-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/SNL-STL-3KO-SOB-hw3.ml))((name OBH-BKW-TDS-WCS-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ingredients -> Slice (p ingredients)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let add ingredient = insert x in map (add x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/OBH-BKW-TDS-WCS-hw3.ml))((name W1B-V1O-CWC-FSV-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s1 -> Slice (p s1)\n  | Cake (s1, s2) -> Cake ((map p s1), (map p s2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/W1B-V1O-CWC-FSV-hw3.ml))((name 11J-HZH-3OP-A4U-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice lst -> Slice (p lst)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec add x temp lst =\n     match lst with\n     | [] -> temp @ [x]\n     | y::ys' -> if y = x then (y :: temp) @ ys' else add x (y :: temp) ys' in\n   map (add x []) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/11J-HZH-3OP-A4U-hw3.ml))((name 4CJ-YOV-DVK-RFX-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))\n  | Slice l -> Slice (p l)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun l -> insert x l) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun s -> fun l -> union s l) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/4CJ-YOV-DVK-RFX-hw3.ml))((name EDE-YDY-GC4-LAO-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (Slice x, y) -> Cake ((Slice (p x)), (map p y))\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let clean l =\n     let rec some x l =\n       match l with | [] -> false | y::ys -> (x = y) || (some x ys) in\n     let remove x y = if some x y then y else x :: y in\n     List.fold_right remove l [] in\n   clean (fold_cake union [] c) : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/EDE-YDY-GC4-LAO-hw3.ml))((name C91-GML-M14-KFW-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/C91-GML-M14-KFW-hw3.ml))((name FMT-OPB-OKP-3SP-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (y, z) -> Cake ((map p y), (map p z))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let add = insert x in map add c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec unique l nl =\n     match l with | [] -> nl | x::xs -> unique xs (insert x nl) in\n   let get_ingrs i a =\n     match i with\n     | [] -> unique a []\n     | x -> union (unique x []) (unique a []) in\n   match c with\n   | Slice x -> unique x []\n   | Cake (y, z) ->\n       union (fold_cake get_ingrs [] y) (fold_cake get_ingrs [] z) : \n  ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/FMT-OPB-OKP-3SP-hw3.ml))((name GML-WHL-X14-GLN-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ingre_lst -> Slice (p ingre_lst)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/GML-WHL-X14-GLN-hw3.ml))((name S1P-OVO-E4P-XWM-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice a -> Slice (p a)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/S1P-OVO-E4P-XWM-hw3.ml))((name MGU-9FN-ZBO-HCS-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice lst -> Slice (p lst)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun lst -> if List.mem x lst then lst else lst @ [x]) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let f lst base =\n     List.fold_left\n       (fun results ->\n          fun x -> if List.mem x results then results else x :: results) base\n       lst in\n   fold_cake f [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/MGU-9FN-ZBO-HCS-hw3.ml))((name SBO-R1Y-HZO-NPZ-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ingredients -> Slice (p ingredients)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun ings -> if List.mem x ings then ings else ings @ [x]) c : \n  cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec unique_concat l1 l2 =\n     match l2 with\n     | [] -> l1\n     | x::rest -> unique_concat (if List.mem x l1 then l1 else l1 @ [x]) rest in\n   fold_cake unique_concat [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/SBO-R1Y-HZO-NPZ-hw3.ml))((name UHP-OB1-SOG-ZGS-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (x, y) ->\n      let e = map p x in let d = map p y in let c = Cake (e, d) in c")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/UHP-OB1-SOG-ZGS-hw3.ml))((name OWU-GRO-SYO-HG1-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (i, j) -> Cake ((map p i), (map p j))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/OWU-GRO-SYO-HG1-hw3.ml))((name ZO4-WRZ-DUD-AV1-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice [] -> Slice []\n  | Slice x -> Slice (p x)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun y -> insert x y) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun x -> union x) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/ZO4-WRZ-DUD-AV1-hw3.ml))((name V1S-OGW-34O-JDT-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let addIng i l =\n     if List.for_all (fun x -> x != i) l then insert i l else l in\n   map (addIng x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec addToList ingrs l =\n     match ingrs with\n     | [] -> l\n     | x::xs ->\n         if List.for_all (fun y -> y != x) l\n         then addToList xs (x :: l)\n         else addToList xs l in\n   fold_cake addToList [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/V1S-OGW-34O-JDT-hw3.ml))((name GZJ-GJX-1TH-ZO9-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  raise NotImplemented")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (raise NotImplemented : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/GZJ-GJX-1TH-ZO9-hw3.ml))((name 4O9-EYZ-1OV-UHV-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))\n  | Slice s -> Slice (p s)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/4O9-EYZ-1OV-UHV-hw3.ml))((name NWW-SGF-CLW-WCV-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun l -> insert x l) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec exist x l =\n     match l with | [] -> false | h::t -> (h == x) || (exist x t) in\n   let rec f l ingred_list =\n     match (l, ingred_list) with\n     | ([], ingred_list) -> ingred_list\n     | (h::t, ingred_list) ->\n         if exist h ingred_list\n         then f t ingred_list\n         else f t (h :: ingred_list) in\n   fold_cake f [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/NWW-SGF-CLW-WCV-hw3.ml))((name CVO-1Z3-FWU-Y9A-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice il -> Slice (p il)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun il -> insert x il) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun il -> fun i -> union i il) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/CVO-1Z3-FWU-Y9A-hw3.ml))((name KFP-O1R-O9S-OS1-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice a -> Slice (p a)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec check x l =\n     match l with | [] -> [x] | h::t -> if h = x then l else h :: (check x t) in\n   map (check x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/KFP-O1R-O9S-OS1-hw3.ml))((name CRF-PRS-GMR-GGB-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun p -> insert x p) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/CRF-PRS-GMR-GGB-hw3.ml))((name TXS-1YN-PDJ-FFG-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let add_ingredient l = insert x l in map add_ingredient c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/TXS-1YN-PDJ-FFG-hw3.ml))((name OCX-Z1F-HV1-CW4-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ingredientList -> Slice (p ingredientList)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/OCX-Z1F-HV1-CW4-hw3.ml))((name J1N-KZW-ZAF-1VE-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (s1, s2) -> Cake ((map p s1), (map p s2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let addSingleList (ing : ingredients list) =\n     (insert x ing : ingredients list) in\n   map addSingleList c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let foldMethod (ing : ingredients list) stuff = union stuff ing in\n   fold_cake foldMethod [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/J1N-KZW-ZAF-1VE-hw3.ml))((name AHO-ND3-ECE-TB1-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice b -> Slice (p b)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec check (a : ingredients list) =\n     match a with\n     | [] -> false\n     | b::xs -> if b = x then true || (check xs) else false || (check xs) in\n   map (fun y -> if check y then y else y @ [x]) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec check1 (d : ingredients list) (e : ingredients) =\n     match d with\n     | [] -> false\n     | f::xs ->\n         if f = e then true || (check1 xs e) else false || (check1 xs e) in\n   let rec check2 (a : ingredients list) (x : ingredients list) =\n     match a with\n     | [] -> x\n     | b::xs -> if check1 x b then check2 xs x else check2 xs (b :: x) in\n   fold_cake check2 [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/AHO-ND3-ECE-TB1-hw3.ml))((name K1Y-KTG-RWO-CJ1-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun y -> insert x y) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun x -> union x) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/K1Y-KTG-RWO-CJ1-hw3.ml))((name 9XE-HZG-TKN-SGA-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (x, Slice y) -> Cake (c, (Slice (p y)))\n  | Cake (Slice x, Slice y) -> Cake ((Slice (p x)), (Slice (p y)))\n  | Slice (x::y) -> Slice (p [x])")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun (a::b::[]) -> [a; x]) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/9XE-HZG-TKN-SGA-hw3.ml))((name HU9-DGJ-XHG-W91-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (Slice x, Slice y) -> Cake ((Slice (p x)), (Slice (p y)))\n  | Cake (Slice x, y) -> Cake ((Slice (p x)), (map p y))\n  | Cake (x, Slice y) -> Cake ((map p x), (Slice (p y)))\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec add i s =\n     match s with\n     | [] -> [i]\n     | x::[] -> if x == i then [x] else [x; i]\n     | x::y as xs -> if x == i then xs else x :: (add i y) in\n   map (add x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let not_equals x y = x != y in\n   let rec flatten a b =\n     match b with\n     | [] -> a\n     | h::t ->\n         if List.for_all (not_equals h) a\n         then flatten (h :: a) t\n         else flatten a t in\n   fold_cake flatten [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/HU9-DGJ-XHG-W91-hw3.ml))((name LYB-3SD-WJD-41Z-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/LYB-3SD-WJD-41Z-hw3.ml))((name BG3-1OS-R1O-UGM-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/BG3-1OS-R1O-UGM-hw3.ml))((name XJO-W3B-XRK-ZOT-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice list -> Slice (p list)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map\n     (fun list ->\n        if List.exists (fun f -> f == x) list then list else list @ [x]) c : \n  cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun slice -> fun base -> slice @ base) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/XJO-W3B-XRK-ZOT-hw3.ml))((name OS9-TCO-JL1-SGL-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice il -> Slice (p il)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let ins_x (il : ingredients list) = (insert x il : ingredients list) in\n   map ins_x c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/OS9-TCO-JL1-SGL-hw3.ml))((name R11-B1M-ZGH-O4G-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec check_ingredient x s =\n     match s with\n     | s::[] -> s = x\n     | [] -> false\n     | sh::st -> (sh = x) || (check_ingredient x st) in\n   map (fun l -> if check_ingredient x l then l else insert x l) c : \n  cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun l -> fun acc -> union acc l) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/R11-B1M-ZGH-O4G-hw3.ml))((name Z1M-ZYP-PZA-K9S-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (cake1, cake2) -> Cake ((map p cake1), (map p cake2))\n  | Slice ingrs_list -> Slice (p ingrs_list)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/Z1M-ZYP-PZA-K9S-hw3.ml))((name GB3-DL1-SOW-GBY-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec add_to_list ing l =\n     match l with\n     | [] -> [ing]\n     | h::t -> if h = ing then l else h :: (add_to_list ing t) in\n   map (add_to_list x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec exists ing l =\n     match l with | [] -> false | h::t -> (h = ing) || (exists ing t) in\n   let union l1 l2 =\n     let rec remove_duplicates l acc =\n       match l with\n       | [] -> acc\n       | h::t ->\n           if exists h acc\n           then remove_duplicates t acc\n           else remove_duplicates t (h :: acc) in\n     remove_duplicates (l1 @ l2) [] in\n   fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/GB3-DL1-SOW-GBY-hw3.ml))((name SOW-DCB-VYR-TSP-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (ck1, ck2) -> Cake ((map p ck1), (map p ck2))\n  | Slice ingList -> Slice (p ingList)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let addToList ingre ingList =\n     if List.exists (fun x -> x == ingre) ingList\n     then ingList\n     else ingList @ [ingre] in\n   map (addToList x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec addIngs ingList acc =\n     match ingList with\n     | [] -> acc\n     | h::t ->\n         if List.exists (fun x -> x == h) acc\n         then addIngs t acc\n         else (addIngs t acc) @ [h] in\n   fold_cake addIngs [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/SOW-DCB-VYR-TSP-hw3.ml))((name ZK1-EBL-OVJ-FZ4-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice c -> Slice (p c)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec singlify_list list =\n     match list with | [] -> [] | x::xs -> insert x (singlify_list xs) in\n   singlify_list (fold_cake (@) [] c) : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/ZK1-EBL-OVJ-FZ4-hw3.ml))((name OY1-BED-ZOX-OJ1-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ings -> Slice (p ings)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun ings -> insert x ings) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun i -> fun b -> union i b) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/OY1-BED-ZOX-OJ1-hw3.ml))((name NWP-GBZ-XBB-LFA-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/NWP-GBZ-XBB-LFA-hw3.ml))((name ORF-19O-1AS-3BA-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))\n  | Slice s -> Slice (p s)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun i -> union i [x]) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun x -> fun y -> union y x) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/ORF-19O-1AS-3BA-hw3.ml))((name XC3-OY1-GEL-GCC-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (a, b) -> Cake ((map p a), (map p b))\n  | Slice s -> Slice (p s)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (match c with\n   | Cake (a, b) -> map (insert x) c\n   | Slice s -> map (insert x) (Slice s) : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (match c with\n   | Cake (a, b) ->\n       union (fold_cake (fun l -> fun b -> union b l) [] a)\n         (fold_cake (fun l -> fun b -> union b l) [] b)\n   | Slice s -> fold_cake (fun l -> fun b -> union b l) [] (Slice s) : \n  ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/XC3-OY1-GEL-GCC-hw3.ml))((name EZR-HK9-RA1-1LN-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ing -> Slice (p ing)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/EZR-HK9-RA1-1LN-hw3.ml))((name 9RZ-4ZE-GZO-S1D-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/9RZ-4ZE-GZO-S1D-hw3.ml))((name KKC-OBK-BOF-1HY-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun l -> fun b -> union b l) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/KKC-OBK-BOF-1HY-hw3.ml))((name UOW-M3W-HPJ-MSS-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec ingredient_to_slice s =\n     match s with\n     | [] -> [x]\n     | h::t -> if h = x then s else h :: (ingredient_to_slice t) in\n   map ingredient_to_slice c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let check_n_add ingredL l =\n     let Slice c = List.fold_right add_ingredient ingredL (Slice l) in c in\n   fold_cake check_n_add [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/UOW-M3W-HPJ-MSS-hw3.ml))((name 1TF-VLM-WT4-V9G-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let f l = let x' = x in insert x' l in map f c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let f x b = union b x in fold_cake f [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/1TF-VLM-WT4-V9G-hw3.ml))((name AOK-E1Y-XT1-BPK-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice [] -> Slice []\n  | Slice s -> Slice (p s)\n  | Cake (l, r) -> Cake ((map p l), (map p r))")(add_ingredient"let rec add_ingredient (x : ingredients) (c : cake) =\n  (match c with\n   | Slice [] -> Slice [x]\n   | Slice s -> map (fun s -> union s [x]) (Slice s)\n   | Cake (l, r) -> Cake ((add_ingredient x l), (add_ingredient x r)) : \n  cake)")(get_all_ingredients"let rec get_all_ingredients (c : cake) =\n  (match c with\n   | Slice [] -> []\n   | Slice s -> fold_cake (fun s -> fun [] -> union [] s) [] (Slice s)\n   | Cake (l, r) -> union (get_all_ingredients l) (get_all_ingredients r) : \n  ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/AOK-E1Y-XT1-BPK-hw3.ml))((name MYM-A91-94W-UOE-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice list -> Slice (p list)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let help_insert = insert x in map help_insert c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/MYM-A91-94W-UOE-hw3.ml))((name B19-WXN-XUV-1ZG-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let listCake (l : ingredients list) =\n     match l with | [] -> insert x l | l -> insert x l in\n   map listCake c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/B19-WXN-XUV-1ZG-hw3.ml))((name TJV-E39-OY4-9WW-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun ingredients_list -> insert x ingredients_list) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun ingredients_list -> fun acc -> union ingredients_list acc)\n     [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/TJV-E39-OY4-9WW-hw3.ml))((name GH9-J1B-CCY-3DW-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (a, b) -> Cake ((map p a), (map p b))\n  | Slice a -> Slice (p a)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map\n     (fun b ->\n        if not (List.fold_left (fun a -> fun y -> a || (y = x)) false b)\n        then b @ [x]\n        else b) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/GH9-J1B-CCY-3DW-hw3.ml))((name YDO-GBT-POX-1T3-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (x, s) -> Cake ((map p x), (map p s))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map\n     (fun s ->\n        if (List.length (List.filter (fun ing -> ing == x) s)) == 0\n        then s @ [x]\n        else s) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun ing -> fun base -> union ing base) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/YDO-GBT-POX-1T3-hw3.ml))((name KYW-JOG-ONO-SDG-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  raise NotImplemented")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (raise NotImplemented : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/KYW-JOG-ONO-SDG-hw3.ml))((name 4GA-GZV-G4X-1F1-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice slice -> Slice (p slice)\n  | Cake (cake1, cake2) -> Cake ((map p cake1), (map p cake2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/4GA-GZV-G4X-1F1-hw3.ml))((name CNV-VL1-JON-XO9-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (x, y) -> Cake ((map p x), (map p y))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let adder y = if List.exists (fun z -> z = x) y then y else y @ [x] in\n   map adder c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec helper x y = x @ y in fold_cake helper [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/CNV-VL1-JON-XO9-hw3.ml))((name SB1-H1L-BJN-GH3-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))\n  | Slice l -> Slice (p l)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (union [] (fold_cake (@) [] c) : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/SB1-H1L-BJN-GH3-hw3.ml))((name M3L-43N-O4Z-KX1-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/M3L-43N-O4Z-KX1-hw3.ml))((name K1Y-SSS-UGS-OSO-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice ingList -> Slice (p ingList)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map\n     (fun ingList -> if existInList x ingList then ingList else ingList @ [x])\n     c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/K1Y-SSS-UGS-OSO-hw3.ml))((name GS3-LLJ-YHP-4OZ-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  raise NotImplemented")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (raise NotImplemented : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/GS3-LLJ-YHP-4OZ-hw3.ml))((name SVD-CUM-MOX-CCB-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun l -> insert x l) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake (fun l -> fun acc -> union acc l) [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/SVD-CUM-MOX-CCB-hw3.ml))((name YOO-4NO-JVW-VCW-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (map (fun i -> insert x i) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/YOO-4NO-JVW-VCW-hw3.ml))((name GLE-3VO-X4T-PAJ-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (a, b) -> Cake ((map p a), (map p b))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (union [] (fold_cake union [] c) : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/GLE-3VO-X4T-PAJ-hw3.ml))((name CO3-ROZ-GOX-VGM-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let p = insert x in map p c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let f = union in fold_cake f [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/CO3-ROZ-GOX-VGM-hw3.ml))((name OFO-RGB-B1G-D11-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with | Cake (x, y) -> map p y")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (raise NotImplemented : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/OFO-RGB-B1G-D11-hw3.ml))((name URS-JSD-OGM-AZL-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> Slice (p l)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec contains i l =\n     match l with | [] -> false | x::xs -> (i = x) || (contains i xs) in\n   let appender i l = if contains i l then l else l @ [i] in\n   map (appender x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec contains i l =\n     match l with | [] -> false | x::xs -> (i = x) || (contains i xs) in\n   let rec rep_remover l0 l1 =\n     match l0 with\n     | [] -> l1\n     | x::xs ->\n         if contains x l1\n         then rep_remover xs l1\n         else rep_remover xs (x :: l1) in\n   fold_cake rep_remover [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/URS-JSD-OGM-AZL-hw3.ml))((name UD1-PYZ-FSK-BMF-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  raise NotImplemented")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (raise NotImplemented : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/UD1-PYZ-FSK-BMF-hw3.ml))((name GGD-OBE-GD1-CPC-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))\n  | Slice l -> Slice (p l)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec f c =\n     match c with\n     | Slice s -> map (fun _ -> union s [x]) c\n     | Cake (s1, s2) -> Cake ((f s1), (f s2)) in\n   f c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec f c acc =\n     match c with\n     | Slice l -> union l acc\n     | Cake (c1, c2) ->\n         let l1 = union (fold_cake union acc c1) (f c2 acc) in\n         let l2 = union (fold_cake union acc c2) (f c1 acc) in union l1 l2 in\n   f c [] : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/GGD-OBE-GD1-CPC-hw3.ml))((name FGT-RKH-ALO-GOZ-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l -> List.map p [l]\n  | Cake (c1, c2) -> (map p c1) @ (map p c2)")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (raise NotImplemented : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/FGT-RKH-ALO-GOZ-hw3.ml))((name B1S-4FU-1SW-OGG-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice i -> Slice (p i)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (raise NotImplemented : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (raise NotImplemented : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/B1S-4FU-1SW-OGG-hw3.ml))((name SGE-XND-9NP-ERB-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (y, z) -> Cake ((map p y), (map p z))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) =\n  (let rec add_ingredient' l =\n     match l with\n     | [] -> insert x l\n     | y::ys -> if x = y then l else y :: (add_ingredient' ys) in\n   map add_ingredient' c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (match c with | Slice x -> x | Cake (y, z) -> fold_cake union [] c : \n  ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/SGE-XND-9NP-ERB-hw3.ml))((name GZD-XSU-SEP-G1J-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice s -> Slice (p s)\n  | Cake (l, r) -> Cake ((map p l), (map p r))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/GZD-XSU-SEP-G1J-hw3.ml))((name PD1-3JO-GJN-V34-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice x -> Slice (p x)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (fold_cake union [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/PD1-3JO-GJN-V34-hw3.ml))((name G49-BPG-39L-TGZ-hw3.ml)(function_list((map"let rec map (p : ingredients list -> ingredients list) (c : cake) =\n  match c with\n  | Slice l1 -> Slice (p l1)\n  | Cake (c1, c2) -> Cake ((map p c1), (map p c2))")(add_ingredient"let add_ingredient (x : ingredients) (c : cake) = (map (insert x) c : cake)")(get_all_ingredients"let get_all_ingredients (c : cake) =\n  (let rec combiner l1 l2 =\n     match l2 with\n     | [] -> List.fold_right insert l1 l2\n     | x::xs -> combiner (insert x l1) xs in\n   fold_cake combiner [] c : ingredients list)")))(file_path /home/neil/Documents/fall-2020-students-code/hw3/G49-BPG-39L-TGZ-hw3.ml)))